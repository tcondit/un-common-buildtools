<?xml version="1.0"?>

<!-- ===================================================================== -->
<!-- Envision build file                                                   -->
<!-- ===================================================================== -->
<!-- <project name="buildSetup" default="installers" basedir="."
    xmlns:ac="antlib:net.sf.antcontrib"> -->
<project name="buildSetup" default="do_nothing">

    <!-- ================================================================= -->
    <!-- Be conservative and do nothing here.  All builds should originate -->
    <!-- with build.xml                                                    -->
    <!-- ================================================================= -->
    <target name="do_nothing"/>

    <!-- ================================================================= -->
    <!-- Make environment variables accessible in build.properties         -->
    <!-- ================================================================= -->
    <!-- http://forums.sun.com/thread.jspa?messageID=4257700 -->
    <property environment="env"/>

    <!-- ================================================================= -->
    <!-- Source the contents of build.properties                           -->
    <!-- ================================================================= -->
    <!-- Note: There should not be any references to this property anywhere in
    the rest of the script.  It is read at this point, the property values are
    set, and that's the end of it. -->
    <!-- TODO consider loadproperties task instead. -timc 5/28/2009 -->
    <property file="build.properties" />

    <!-- ================================================================= -->
    <!-- Top-level target: create and deploy all installers                -->
    <!-- ================================================================= -->
    <target name="release-installers" depends="propset, prepare"
        description="Copies installers, documentation, etc. from build machine to release share">

        <!-- target1, all versions -->
        <antcall target="release-AgentSupport"/>
        <!-- Also see release-Administrator further below -->
        <antcall target="release-PerformanceSuite"/>
        <antcall target="release-Documentation-CD1"/>

        <!-- target2, all versions -->
        <antcall target="release-Server"/>
        <antcall target="release-Documentation-CD2"/>

        <!-- target3 -->
        <antcall target="release-CD3"/>

        <!-- target2, 9.6.0000.0 and later -->
        <antcall target="release-Analytics"/>
        <antcall target="release-Centricity"/>
        <antcall target="release-CentricityWebApplications"/>
        <antcall target="release-WMWrapperService"/>

        <!-- target2, 9.8.0000.0 and later -->
        <antcall target="release-SpeechServerService"/>
        <antcall target="release-SpeechProcessingClient"/>
        <!-- target3, 9.8.0000.0 and later -->
        <antcall target="release-EnvisionPlugin"/>

        <antcall target="release-CentricityQM"/>

        <!-- PRN23176 -->
        <antcall target="release-Administrator"/>

        <!-- PRN23192. Note: ADIT is deprecated in Viper -->
        <antcall target="release-Tools"/>

        <!-- PRN23270: Generate the old DBMigration installer for
        on-demand use in Viper, but don't include in CD2 -->
        <antcall target="make-DBMigration"/>

        <!-- PRN23217 -->
        <antcall target="release-ChannelManager"/>

        <!-- PRN23312 -->
        <antcall target="release-ServerSuite"/>

        <antcall target="release-CD4"/>
    </target>

    <!-- ================================================================= -->
    <!-- Set conditional properties                                        -->
    <!-- ================================================================= -->
    <!-- these echo's shouldn't be inside a target -->
    <target name="propset" depends="define-ac">
        <!-- If we get here, display the current settings. -->
        <!--
        <echo message="C++ compiler: ${compiler.cpp}"/>
        <echo message="message compiler: ${compiler.message}"/>
        <echo message="VS common tools: ${vscommontools}"/>
        <echo message="certificate file: ${file.pfx}"/>
        <echo message="signtool password: ${signtool.password}"/>
        -->
    </target>

    <!-- ================================================================= -->
    <!-- TODO does this replace the antcontrib taskdef ??                  -->
    <!-- ================================================================= -->
    <!-- TEMPORARY HACK until I get everything into a single build file.  This
    target has to be identical to the one in build.xml -->
    <!-- TODO should I put ant-contrib.jar in the Ant lib dir? -->
    <target name="define-ac">
        <typedef resource="net/sf/antcontrib/antlib.xml"
            uri="antlib:net.sf.antcontrib"
            classpath="lib/ant-contrib-1.0b3.jar"/>
        <typedef name="isgreaterthan"
            classname="net.sf.antcontrib.logic.condition.IsGreaterThan"
            uri="antlib:net.sf.antcontrib"
            classpath="lib/ant-contrib-1.0b3.jar"/>
        <typedef name="islessthan"
            classname="net.sf.antcontrib.logic.condition.IsLessThan"
            uri="antlib:net.sf.antcontrib"
            classpath="lib/ant-contrib-1.0b3.jar"/>
    </target>

    <!-- ================================================================= -->
    <!-- Prepare the release share for the installers                      -->
    <!-- ================================================================= -->
    <target name="prepare" description="Prepare the release share for the installers">
        <mkdir dir="${dir.products}/${version.product}"/>
        <!-- assign these properties sooner so they can be used by the
        sub-targets (release-ADIT, release-DADI, etc.) as well as by
        release-installers -->
        <property name="target1" value="${dir.products}/${version.product}/CD1"/>
        <property name="target2" value="${dir.products}/${version.product}/CD2"/>
        <property name="target3" value="${dir.products}/${version.product}/CD3"/>
        <property name="target4" value="${dir.products}/${version.product}/CD4"/>
        <property name="dir.retired" value="${target2}/Retired"/>
        <property name="dir.utils" value="${target2}/utils"/>
        <property name="dir.nuasis-plugin" value="${target2}/utils/Nuasis"/>
    </target>

    <!-- ================================================================= -->
    <!-- Unzip WebHelp for the Server installer                            -->
    <!-- ================================================================= -->
    <target name="unzip-WebHelp"
        depends="unzip-AgentDesktop_WebHelp, unzip-BI_WebHelp,
        unzip-Centricity_WebHelp, unzip-ClassicReports_WebHelp"/>

    <!-- ================================================================= -->
    <!-- Unzip Agent_Desktop_Webhelp.zip for the Server installer          -->
    <!-- ================================================================= -->
    <target name="unzip-AgentDesktop_WebHelp">
        <unjar
            src="${dir.build}/Documentation/WebHelp/EN/Agent_Desktop_Webhelp.zip"
            dest="${dir.build}/Documentation/WebHelp/EN/Agent_Desktop_Webhelp"/>
        <unjar
            src="${dir.build}/Documentation/WebHelp/DE/Agent_Desktop_Webhelp.zip"
            dest="${dir.build}/Documentation/WebHelp/DE/Agent_Desktop_Webhelp"/>
        <unjar
            src="${dir.build}/Documentation/WebHelp/ES/Agent_Desktop_Webhelp.zip"
            dest="${dir.build}/Documentation/WebHelp/ES/Agent_Desktop_Webhelp"/>
    </target>

    <!-- ================================================================= -->
    <!-- Unzip BI WebHelp for the Server installer                         -->
    <!-- ================================================================= -->
    <!-- BI is not localized -->
    <target name="unzip-BI_WebHelp">
        <unjar
            src="${dir.build}/Documentation/WebHelp/EN/BI_Webhelp.zip"
            dest="${dir.build}/Documentation/WebHelp/EN/BI_Webhelp"/>
    </target>

    <!-- ================================================================= -->
    <!-- Unzip Centricity WebHelp for the Server installer                 -->
    <!-- ================================================================= -->
    <target name="unzip-Centricity_WebHelp" depends="propset">
        <unjar
            src="${dir.build}/Documentation/WebHelp/EN/Centricity_Webhelp.zip"
            dest="${dir.build}/Documentation/WebHelp/EN/Centricity_Webhelp"/>
        <unjar
            src="${dir.build}/Documentation/WebHelp/DE/Centricity_Webhelp.zip"
            dest="${dir.build}/Documentation/WebHelp/DE/Centricity_Webhelp"/>
        <unjar
            src="${dir.build}/Documentation/WebHelp/ES/Centricity_Webhelp.zip"
            dest="${dir.build}/Documentation/WebHelp/ES/Centricity_Webhelp"/>
        <unjar
            src="${dir.build}/Documentation/WebHelp/EN/Agent_Desktop_Centricity_Webhelp.zip"
            dest="${dir.build}/Documentation/WebHelp/EN/Agent_Desktop_Centricity_Webhelp"/>

        <unjar
            src="${dir.build}/Documentation/WebHelp/DE/Agent_Desktop_Centricity_Webhelp.zip"
            dest="${dir.build}/Documentation/WebHelp/DE/Agent_Desktop_Centricity_Webhelp"/>
        <unjar
            src="${dir.build}/Documentation/WebHelp/ES/Agent_Desktop_Centricity_Webhelp.zip"
            dest="${dir.build}/Documentation/WebHelp/ES/Agent_Desktop_Centricity_Webhelp"/>
    </target>

    <!-- ================================================================= -->
    <!-- Unzip Classic reporting WebHelp for the Server installer          -->
    <!-- ================================================================= -->
    <target name="unzip-ClassicReports_WebHelp">
        <!-- Maybe later this will become three separate tasks. -->
        <unjar
            src="${dir.build}/Documentation/WebHelp/EN/Classic_reports_Webhelp.zip"
            dest="${dir.build}/Documentation/WebHelp/EN/Classic_reports_Webhelp"/>
        <unjar
            src="${dir.build}/Documentation/WebHelp/DE/Classic_reports_Webhelp.zip"
            dest="${dir.build}/Documentation/WebHelp/DE/Classic_reports_Webhelp"/>
        <unjar
            src="${dir.build}/Documentation/WebHelp/ES/Classic_reports_Webhelp.zip"
            dest="${dir.build}/Documentation/WebHelp/ES/Classic_reports_Webhelp"/>
    </target>

    <!-- ================================================================= -->
    <!-- Unzip the "Envision" JRE into the working copy                    -->
    <!-- ================================================================= -->
    <!-- In case you're wondering: this is a repackage of the private JRE from
    jdk-6u14-windows-i586.exe.  As far as I know, we cannot use the public
    JRE, because it's missing bin\client\jvm.dll or bin\server\jvm.dll (I
    forget exactly which, but it's something like that.
    .
    TODO common-buildtools needs to include a version check going forward from
    July09 (9.10).  It should include the JRE and the zipped up JAR files for
    Server and PerformanceSuite.
    .
    PKI09 (9.9) -> 1.6.0_03
    July09 (9.10) -> 1.6.0_14 -->
    <target name="unzip-Envision_JRE" depends="propset">
        <property name="Envision_JRE" value="jre1.6.0_14-Envision-no-jars.zip"/>
        <unjar
            src="${dir.jre}/${Envision_JRE}"
            dest="${dir.sdk}/java"/>
    </target>

    <!-- ================================================================= -->
    <!-- Unzip the Server JARs into the working copy                       -->
    <!-- ================================================================= -->
    <!-- I decided to keep the JAR files out of the JRE at the level of the
    working copy.  They will be added in by the installer, but this keeps
    things from getting messy.  And it removes an artificial dependency, since
    unzip-Server-jars_ZIP would otherwise depend on unzip-Envision_JRE.
    (make-Server depends on both of them.) -->
    <target name="unzip-Server-jars_ZIP" depends="propset">
        <property name="Server-jars_ZIP" value="jar-files-EnvisionServer-9.10SP3.zip"/>
        <unjar
            src="${dir.jre}/${Server-jars_ZIP}"
            dest="${dir.sdk}/java"/>
    </target>

    <!-- ================================================================= -->
    <!-- Unzip the PerformanceSuite JARs into the working copy             -->
    <!-- ================================================================= -->
    <!-- I decided to keep the JAR files out of the JRE at the level of the
    working copy.  They will be added in by the installer, but this keeps
    things from getting messy.  And it removes an artificial dependency, since
    unzip-Server-jars_ZIP would otherwise depend on unzip-Envision_JRE.
    (make-PerformanceSuite depends on both of them.) -->
    <target name="unzip-PerformanceSuite-jars_ZIP" depends="propset">
        <property name="EPS-jars_ZIP" value="jar-files-EnvisionPerformanceSuite-9.10.zip"/>
        <unjar
            src="${dir.jre}/${EPS-jars_ZIP}"
            dest="${dir.sdk}/java"/>
    </target>

    <!-- ================================================================= -->
    <!-- Unzip the default Nuance profile for the Speech Server            -->
    <!-- ================================================================= -->
    <!-- TODO VIPER -timc 9/20/2010 -->
    <target name="unzip-NuanceProfile" depends="propset">
        <unjar src="${dir.sdk}/Nuance/Envision.zip" dest="${dir.workdir}/AudioMining"/>
        <unjar src="${dir.sdk}/Nuance/EnvisionEnglishUK.zip" dest="${dir.workdir}/AudioMining"/>
        <unjar src="${dir.sdk}/Nuance/EnvisionGerman.zip" dest="${dir.workdir}/AudioMining"/>
        <exec dir="${dir.bin}" executable="7za.exe" vmlauncher="false" failonerror="false">
            <arg line="x ${dir.sdk}/Nuance/EnvisionSpanish.zip -o${dir.workdir}/AudioMining"/>
        </exec>
        <exec dir="${dir.bin}" executable="7za.exe" vmlauncher="false" failonerror="false">
            <arg line="x ${dir.sdk}/Nuance/EnvisionSpanishLA.zip -o${dir.workdir}/AudioMining"/>
        </exec>
    </target>

    <!-- ================================================================= -->
    <!-- Publish CD3                                                       -->
    <!-- ================================================================= -->
    <target name="release-CD3" depends="prepare">
        <copy todir="${target3}">
            <fileset dir="${uncpath.cd3_sources}"/>
        </copy>
        <!-- Brian's Envision Service Monitor -->
        <property name="dir.svcmon"
            value="${dir.build}/src/tools/EnvisionServiceMonitor/EnvisionServiceMonitor/bin/Release"/>
        <copy file="${dir.svcmon}/EnvisionServiceMonitor.exe" todir="${target3}"/>
        <copy file="${dir.svcmon}/EnvisionServiceMonitor.exe.config" todir="${target3}"/>
    </target>

    <!-- ================================================================= -->
    <!-- Publish CD4                                                       -->
    <!-- ================================================================= -->
    <target name="release-CD4" depends="prepare">
        <copy todir="${target4}">
            <fileset dir="${uncpath.cd4_sources}"/>
        </copy>
    </target>

    <!-- ================================================================= -->
    <!-- Make and release ADIT                                             -->
    <!-- ================================================================= -->
    <target name="make-ADIT" depends="prepare">
        <build-AI-installer
            product.name="ADIT"
            installer.path="${dir.installs}/ADIT"
            project.file="${dir.installs}/ADIT/ADIT.aip"/>
    </target>
    <target name="release-ADIT" depends="make-ADIT">
        <release-AI-installer
            product.name="ADIT"
            installer.path="${dir.installs}/ADIT"
            product.path="${dir.utils}"/>
    </target>

    <!-- ================================================================= -->
    <!-- Make and release AgentSupport                                     -->
    <!-- ================================================================= -->
    <!-- NB: AgentSupport directory is called Agent in 9.6 -->
    <target name="make-AgentSupport" depends="prepare">
        <build-AI-installer
            product.name="AgentSupport"
            installer.path="${dir.installs}/AgentSupport"
            project.file="${dir.installs}/AgentSupport/AgentSupport.aip"/>
    </target>
    <target name="release-AgentSupport" depends="make-AgentSupport">
        <release-AI-installer
            product.name="AgentSupport"
            installer.path="${dir.installs}/AgentSupport"
            product.path="${target1}"/>
    </target>

    <!-- ================================================================= -->
    <!-- Make and release AGMS                                             -->
    <!-- ================================================================= -->
    <target name="make-AGMS" depends="prepare">
        <build-AI-installer
            product.name="AGMS"
            installer.path="${dir.installs}/AGMS"
            project.file="${dir.installs}/AGMS/AGMS.aip"/>
    </target>
    <target name="release-AGMS" depends="make-AGMS">
        <release-AI-installer
            product.name="AGMS"
            installer.path="${dir.installs}/AGMS"
            product.path="${dir.utils}"/>
    </target>

    <!-- ================================================================= -->
    <!-- Make and release Analytics                                        -->
    <!-- ================================================================= -->
    <target name="make-Analytics" depends="prepare">
        <build-AI-installer
            product.name="Analytics"
            installer.path="${dir.installs}/Analytics"
            project.file="${dir.installs}/Analytics/Analytics.aip"/>
    </target>
    <target name="release-Analytics" depends="make-Analytics">
        <release-AI-installer
            product.name="Analytics"
            installer.path="${dir.installs}/Analytics"
            product.path="${target2}"/>
    </target>

    <!-- ================================================================= -->
    <!-- Make and release CentricityQM                                       -->
    <!-- ================================================================= -->
    <target name="make-CentricityQM">
        <build-AI-installer
            product.name="CentricityQM"
            installer.path="${dir.installs}/CentricityQM"
            project.file="${dir.installs}/CentricityQM/CentricityQM.aip"/>
    </target>
    <target name="release-CentricityQM" depends="make-CentricityQM">
        <release-AI-installer
            product.name="CentricityQM"
            installer.path="${dir.installs}/CentricityQM"
            product.path="${dir.utils}"/>
    </target>

    <!-- ================================================================= -->
    <!-- Make and release ChannelManager                                   -->
    <!-- ================================================================= -->
    <target name="make-ChannelManager-installer" depends="prepare">
        <build-AI-installer
            product.name="ChannelManager"
            installer.path="${dir.installs}/ChannelManager"
            project.file="${dir.installs}/ChannelManager/ChannelManager.aip"/>
    </target>
    <target name="release-ChannelManager"
        depends="make-ChannelManager-installer">
        <release-AI-installer
            product.name="ChannelManager"
            installer.path="${dir.installs}/ChannelManager"
            product.path="${target2}"/>
    </target>

    <!-- ================================================================= -->
    <!-- Make and release CentricityWebApplications                        -->
    <!-- ================================================================= -->
    <!-- PRN22798 - obsolete -timc 4/7/2010 -->
    <!-- Not so fast.  Still need it for pre-10.1 installs -timc 5/18/2010 -->
    <target name="make-CentricityWebApplications" depends="prepare">
        <build-AI-installer
            product.name="CentricityWebApplications"
            installer.path="${dir.installs}/CentricityWebApplications"
            project.file="${dir.installs}/CentricityWebApplications/CentricityWebApplications.aip"/>
    </target>
    <target name="release-CentricityWebApplications" depends="make-CentricityWebApplications">
        <release-AI-installer
            product.name="CentricityWebApplications"
            installer.path="${dir.installs}/CentricityWebApplications"
            product.path="${target2}"/>
    </target>

    <!-- ================================================================= -->
    <!-- Make and release SpeechServerService                              -->
    <!-- ================================================================= -->
    <target name="make-SpeechServerService" depends="prepare">
        <build-AI-installer
            product.name="SpeechServerService"
            installer.path="${dir.installs}/SpeechServerService"
            project.file="${dir.installs}/SpeechServerService/SpeechServerService.aip"/>
    </target>
    <target name="release-SpeechServerService" depends="make-SpeechServerService">
        <release-AI-installer
            product.name="SpeechServerService"
            installer.path="${dir.installs}/SpeechServerService"
            product.path="${target2}"/>
    </target>

    <!-- ================================================================= -->
    <!-- Make and release SpeechProcessingClient                           -->
    <!-- ================================================================= -->
    <target name="make-SpeechProcessingClient" depends="prepare,unzip-NuanceProfile">
        <build-AI-installer
            product.name="SpeechProcessingClient"
            installer.path="${dir.installs}/SpeechProcessingClient"
            project.file="${dir.installs}/SpeechProcessingClient/SpeechProcessingClient.aip"/>
    </target>
    <target name="release-SpeechProcessingClient" depends="make-SpeechProcessingClient">
        <release-AI-installer
            product.name="SpeechProcessingClient"
            installer.path="${dir.installs}/SpeechProcessingClient"
            product.path="${target2}"/>
    </target>

    <!-- ================================================================= -->
    <!-- Make and release DADI                                             -->
    <!-- ================================================================= -->
    <target name="make-DADI" depends="prepare">
        <build-AI-installer
            product.name="DADI"
            installer.path="${dir.installs}/DADI"
            project.file="${dir.installs}/DADI/DADI.aip"/>
    </target>
    <target name="release-DADI" depends="make-DADI">
        <release-AI-installer
            product.name="DADI"
            installer.path="${dir.installs}/DADI"
            product.path="${dir.utils}"/>
    </target>

    <!-- ================================================================= -->
    <!-- Make and release DBMigration                                      -->
    <!-- ================================================================= -->
    <target name="make-DBMigration" depends="prepare">
        <build-AI-installer
            product.name="DBMigration"
            installer.path="${dir.installs}/DBMigration"
            project.file="${dir.installs}/DBMigration/DBMigration.aip"/>
    </target>
    <target name="release-DBMigration" depends="make-DBMigration">
        <release-AI-installer
            product.name="DBMigration"
            installer.path="${dir.installs}/DBMigration"
            product.path="${dir.utils}"/>
    </target>

    <!-- TODO this may need to be changed to work with 9.6 to present -->
    <!-- ================================================================= -->
    <!-- Release documentation                                             -->
    <!-- ================================================================= -->
    <target name="release-Documentation-CD1" depends="prepare">
        <!-- full documentation to target1 -->
        <copy todir="${target1}/Documentation">
            <fileset dir="${dir.build}/Documentation/QuickReference">
                <!-- TODO Can I get rid of this?  It's pointless. -->
                <include name="QRS - CentricityAgentDesktop.pdf"/>
            </fileset>
        </copy>
        <copy todir="${target1}/Documentation/UserGuides">
            <fileset dir="${dir.build}/Documentation/UserGuides">
                <exclude name="Install_Upgrade.pdf"/>
            </fileset>
        </copy>
        <!-- ReleaseNotes.pdf with a name change -->
        <copy file="${dir.build}/Documentation/ReleaseNotes/ReleaseNotes.pdf"
            tofile="${target1}/Documentation/ReleaseNotes.pdf"/>
        <copy file="${dir.build}/Documentation/AdbeRdr70_enu.exe"
            tofile="${target1}/Documentation/AdbeRdr70_enu.exe"/>
    </target>
    <!-- TODO this may need to be changed to work with 9.6 to present -->
    <target name="release-Documentation-CD2" depends="prepare">
        <!-- release notes only to target2 -->
        <copy file="${dir.build}/Documentation/ReleaseNotes/ReleaseNotes.pdf"
            tofile="${target2}/Documentation/ReleaseNotes.pdf"/>
        <copy file="${dir.build}/Documentation/AdbeRdr70_enu.exe"
            tofile="${target2}/Documentation/AdbeRdr70_enu.exe"/>
    </target>

    <!-- ================================================================= -->
    <!-- Make and release EvaluationConsistencyCheck (ECC)                 -->
    <!-- ================================================================= -->
    <target name="make-ECC" depends="prepare">
        <build-AI-installer
            product.name="EvaluationConsistencyCheck"
            installer.path="${dir.installs}/EvaluationConsistencyCheck"
            project.file="${dir.installs}/EvaluationConsistencyCheck/EvaluationConsistencyCheck.aip"/>
    </target>
    <target name="release-ECC" depends="make-ECC">
        <release-AI-installer
            product.name="EvaluationConsistencyCheck"
            installer.path="${dir.installs}/EvaluationConsistencyCheck"
            product.path="${dir.utils}"/>
        <!-- additional copy operation for this installer only -->
        <!-- <copy todir="${dir.utils}/EvaluationConsistencyCheck/QM"> -->
        <copy todir="${dir.utils}/EPS8.4_QMPublishedTemplateEditor">
            <fileset dir="${dir.installs}/EvaluationConsistencyCheck/QM"/>
        </copy>
    </target>

    <!-- ================================================================= -->
    <!-- Make and release PerformanceSuite                                 -->
    <!-- ================================================================= -->
    <target name="make-PerformanceSuite"
        depends="prepare, unzip-BI_WebHelp, unzip-Envision_JRE, unzip-PerformanceSuite-jars_ZIP">
        <build-AI-installer
            product.name="PerformanceSuite"
            installer.path="${dir.installs}/PerformanceSuite"
            project.file="${dir.installs}/PerformanceSuite/PerformanceSuite.aip"/>
    </target>
    <target name="release-PerformanceSuite" depends="make-PerformanceSuite">
        <release-AI-installer
            product.name="PerformanceSuite"
            installer.path="${dir.installs}/PerformanceSuite"
            product.path="${target1}"/>
    </target>

    <!-- ================================================================= -->
    <!-- Make and release Administrator                                    -->
    <!-- ================================================================= -->
    <!-- For now, this is practically a clone of make-PerformanceSuite.  After
    Administrator proves itself, PerformanceSuite will go on a major diet. -->
    <target name="make-Administrator-installer"
        depends="prepare, unzip-BI_WebHelp, unzip-Envision_JRE, unzip-PerformanceSuite-jars_ZIP">
        <build-AI-installer
            product.name="Administrator"
            installer.path="${dir.installs}/Administrator"
            project.file="${dir.installs}/Administrator/Administrator.aip"/>
    </target>
    <target name="release-Administrator" depends="make-Administrator-installer">
        <release-AI-installer
            product.name="Administrator"
            installer.path="${dir.installs}/Administrator"
            product.path="${target1}"/>
    </target>

    <!-- ================================================================= -->
    <!-- Make and release ServerSuite                                      -->
    <!-- ================================================================= -->
    <target name="make-ServerSuite"
        depends="prepare, unzip-WebHelp, unzip-Envision_JRE, unzip-Server-jars_ZIP">
        <build-AI-installer
            product.name="ServerSuite"
            installer.path="${dir.installs}/ServerSuite"
            project.file="${dir.installs}/ServerSuite/ServerSuite.aip"/>
    </target>
    <target name="release-ServerSuite" depends="make-ServerSuite">
        <release-AI-installer
            product.name="ServerSuite"
            installer.path="${dir.installs}/ServerSuite"
            product.path="${target2}"/>
    </target>

    <!-- ================================================================= -->
    <!-- Make and release Tools                                             -->
    <!-- ================================================================= -->
    <target name="make-Tools" depends="prepare">
        <build-AI-installer
            product.name="Tools"
            installer.path="${dir.installs}/Tools"
            project.file="${dir.installs}/Tools/Tools.aip"/>
    </target>
    <target name="release-Tools" depends="make-Tools">
        <release-AI-installer
            product.name="Tools"
            installer.path="${dir.installs}/Tools"
            product.path="${dir.utils}"/>
    </target>

    <!-- ================================================================= -->
    <!-- Make and release WMWrapperService                                 -->
    <!-- ================================================================= -->
    <target name="make-WMWrapperService" depends="prepare">
        <build-AI-installer
            product.name="WMWrapperService"
            installer.path="${dir.installs}/WMWrapperService"
            project.file="${dir.installs}/WMWrapperService/WMWrapperService.aip"/>
    </target>
    <target name="release-WMWrapperService" depends="make-WMWrapperService">
        <release-AI-installer
            product.name="WMWrapperService"
            installer.path="${dir.installs}/WMWrapperService"
            product.path="${target2}"/>
    </target>

    <!-- ================================================================= -->
    <!-- Release EnvisionPlugin (for Nuasis only)                          -->
    <!-- ================================================================= -->
    <!-- This plugin goes on the customer's PBX to pass contact source
    messages back and forth with the Server -->
    <!-- TODO it would be much nicer if I could add dependencies on
    jar-EnvisionPlugin and have access to property EnvisionPluginBasedir as
    well.  I'd probably have to put all the build files together to do that
    (which is not a bad idea).  As it stands right now, I'm duplicating the
    property name here in case it's not already set (that blows). -->
    <target name="release-EnvisionPlugin" depends="prepare">
        <property name="EnvisionPluginBasedir"
            value="${dir.workdir}/ContactSourceRunner/EnvisionPlugin/"/>
        <copy file="${EnvisionPluginBasedir}/EnvisionPlugin.jar"
            tofile="${dir.nuasis-plugin}/EnvisionPlugin.jar"/>
    </target>

    <!-- ================================================================= -->
    <!-- Compile AdvancedInstaller project files (macro)                   -->
    <!-- ================================================================= -->
    <!-- <pathconvert targetos="windows" property="compiler.ai.converted">
        <path path="${compiler.ai}"/>
    </pathconvert>
    <echo message="AI compiler path: ${compiler.ai}"/>
    <echo message="AI compiler path (converted): ${compiler.ai.converted}"/> -->
    <!-- TODO pathconvert these guys (not hipri) 1/7/2009 -->
    <!-- some useful bits in the comments here
    http://blog.andrewbeacock.com/2005/08/pretty-printing-java-classpaths-using.html
    -->
    <macrodef name="build-AI-installer">
        <attribute name="product.name"/>
        <attribute name="installer.path"/>
        <attribute name="project.file"/>
        <sequential>
            <echo message="Making installer at @{project.file}"/>
            <mkdir dir="@{installer.path}/newInstall"/>
            <exec dir="@{installer.path}" executable="${compiler.ai}" failonerror="true">
                <arg line="/edit @{project.file} /SetVersion ${version.product}"/>
            </exec>
            <exec dir="@{installer.path}" executable="${compiler.ai}" failonerror="true">
                <arg line="/build @{project.file}"/>
            </exec>
        </sequential>
    </macrodef>

    <!-- ================================================================= -->
    <!-- Release AI installers (macro)                                     -->
    <!-- ================================================================= -->
    <!-- TODO Remove the newInstall bits at some point.  PRN19794 was for
    removing the folders from ProductBuilds, but the ones that are left are on
    the build machine.
    .
    When changing newInstall to install in build-AI-installer and
    release-AI-installer, EVERY installer project file needs to be updated at
    the same time (on the media page).  Open a PRN for it. -timc 1/7/2009 -->
    <macrodef name="release-AI-installer">
        <attribute name="product.name"/>
        <attribute name="installer.path"/>
        <attribute name="product.path"/>
        <sequential>
            <copy todir="@{product.path}">
                <fileset dir="@{installer.path}/newInstall"/>
            </copy>
        </sequential>
    </macrodef>
</project>

