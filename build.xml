<?xml version="1.0" ?>
<!-- ===================================================================== -->
<!-- Envision build file                                                   -->
<!-- ===================================================================== -->
<project name="EPS" default="official-build">

    <!-- NB: run build.xml from the build subdirectory for now -->

    <!-- ================================================================= -->
    <!-- <Set up the environment (non-targets)>                            -->
    <!-- ================================================================= -->
    <!-- add properties at the top of the build file -->
    <!--
    <property name="dir.build" value=".."/>
    -->
    <!-- build.compiler - WTF? -->
    <property name="build.compiler" value="javac1.6"/>
    <property name="javac.debug" value="true"/>
    <property name="javac.deprecation" value="false"/>
    <property name="javac.source" value="1.6"/>
    <property name="vs90_devenv" value="C:/Program Files/Microsoft Visual Studio 9.0/Common7/IDE/devenv.com"/>
    <property name="vs100_devenv" value="C:/Program Files/Microsoft Visual Studio 10.0/Common7/IDE/devenv.com"/>
    <!-- TODO this is used in buildC#CPP.xml.  Make sure mc.exe is on the PATH
    -->
    <!-- <property name="compiler.message" value="C:/bin/mc.exe"/> -->
    <!-- TODO don't forget ANT_OPTS environment variable for Java heap space -->
    <!-- ANT_OPTS=-Xmx1024m -->

    <!-- TODO Why do these need to be prefaced with .. (up-dir)?  The Ant docs
    say that without a basedir in the project declaration, "if neither the
    attribute nor the property have been set, the parent directory of the
    buildfile will be used." -->
    <!--
    <property name="dir.src" value="../src"/>
    <property name="dir.workdir" value="../workdir"/>
    -->

    <property name="cert.envision" value="setup/Signature/EnvisionCertificate.pfx"/>
    <property name="signtool.envisionpass" value="Envision07"/>
    <property name="signtool.timestampurl"
        value="http://timestamp.verisign.com/scripts/timstamp.dll"/>
    <!-- TODO get rid of this one -->
    <property name="vmlauncher" value="false"/>
    <property name="compiler.msbuild"
        value="C:/Windows/Microsoft.NET/Framework/v3.5/MSBuild.exe"/>

    <!-- ================================================================= -->
    <!-- Make environment variables accessible in build.properties         -->
    <!-- ================================================================= -->
    <!-- http://forums.sun.com/thread.jspa?messageID=4257700 -->
    <property environment="env"/>

    <!-- ================================================================= -->
    <!-- import the other build scripts                                    -->
    <!-- ================================================================= -->
    <import file="buildJars.xml"/>
    <import file="buildC#CPP.xml"/>
    <import file="buildSetup.xml"/>
    <import file="unitTests.xml"/>

    <!-- ================================================================= -->
    <!-- Compile C++ project files (macro)                                 -->
    <!-- ================================================================= -->
    <macrodef name="build-cpp">
        <attribute name="configuration" default="Release"/>
        <attribute name="solution.file"/>
        <attribute name="output.path" default="BuildLog.txt"/>
        <sequential>
            <echo message="Compiling @{configuration} from @{solution.file}"/>
            <exec executable="${compiler.cpp}" failonerror="true">
                <arg line="/build @{configuration} @{solution.file} /out @{output.path}"/>
            </exec>
        </sequential>
    </macrodef>

    <!-- ================================================================= -->
    <!-- Compile AdvancedInstaller project files (macro)                   -->
    <!-- ================================================================= -->
    <!-- <pathconvert targetos="windows" property="compiler.ai.converted">
        <path path="${compiler.ai}"/>
    </pathconvert>
    <echo message="AI compiler path: ${compiler.ai}"/>
    <echo message="AI compiler path (converted): ${compiler.ai.converted}"/> -->
    <!-- TODO pathconvert these guys (not hipri) 1/7/2009 -->
    <!-- some useful bits in the comments here
    http://blog.andrewbeacock.com/2005/08/pretty-printing-java-classpaths-using.html
    -->
    <macrodef name="build-AI-installer">
        <attribute name="product.name"/>
        <attribute name="installer.path"/>
        <attribute name="project.file"/>
        <sequential>
            <echo message="Making installer at @{project.file}"/>
            <mkdir dir="@{installer.path}/newInstall"/>
            <exec dir="@{installer.path}" executable="${compiler.ai}" failonerror="true">
                <arg line="/edit @{project.file} /SetVersion ${version.product}"/>
            </exec>
            <exec dir="@{installer.path}" executable="${compiler.ai}" failonerror="true">
                <arg line="/build @{project.file}"/>
            </exec>
        </sequential>
    </macrodef>

    <!-- ================================================================= -->
    <!-- Release AI installers (macro)                                     -->
    <!-- ================================================================= -->
    <!-- TODO Remove the newInstall bits at some point.  PRN19794 was for
    removing the folders from ProductBuilds, but the ones that are left are on
    the build machine.
    .
    When changing newInstall to install in build-AI-installer and
    release-AI-installer, EVERY installer project file needs to be updated at
    the same time (on the media page).  Open a PRN for it. -timc 1/7/2009 -->
    <macrodef name="release-AI-installer">
        <attribute name="product.name"/>
        <attribute name="installer.path"/>
        <attribute name="product.path"/>
        <sequential>
            <copy todir="@{product.path}">
                <fileset dir="@{installer.path}/newInstall"/>
            </copy>
        </sequential>
    </macrodef>

    <!-- started pulling stuff out right here -->
    <!-- <echo message="INFO setting 10.1 properties (if any)"/> -->
            <property name="dir.sdk" value="${env.ETSDK}"/>

    <!-- <echo message="INFO setting 9.8 properties (if any)"/> -->
            <property name="compiler.cpp" value="${vs90_devenv}"/>
            <property name="compiler.message" value="${vs90_mc}"/>
            <property name="vscommontools" value="${env.VS90COMNTOOLS}"/>

    <!-- <echo message="INFO setting 9.7 properties (if any)"/> -->
            <property name="file.pfx" value="${cert.envision}"/>
            <property name="signtool.password" value="${signtool.envisionpass}"/>
    <!-- stopped here -->

    <!-- ================================================================= -->
    <!-- Classpath for projects that use ActiveMQ 5.1.0 and friends        -->
    <!-- ================================================================= -->
    <path id="classpath-v1">
        <fileset dir="${dir.sdk}/java/activemq-5.1.0">
            <include name="*.jar"/>
        </fileset>
    </path>

    <!-- ================================================================= -->
    <!-- Classpath for projects that use ActiveMQ 5.3.1 and friends        -->
    <!-- ================================================================= -->
    <path id="classpath-v2">
        <fileset dir="${dir.sdk}/java/activemq-5.3.1">
            <include name="*.jar"/>
        </fileset>
        <fileset dir="${dir.sdk}/java/apache-tomcat-6.0.20/lib">
            <include name="*.jar"/>
        </fileset>
        <fileset dir="${dir.sdk}/java/geronimo">
            <include name="*.jar"/>
        </fileset>
        <fileset dir="${dir.sdk}/java/iText">
            <include name="*.jar"/>
        </fileset>
        <fileset dir="${dir.sdk}/java/jdbc">
            <include name="*.jar"/>
        </fileset>
        <fileset dir="${dir.sdk}/java/jencks">
            <include name="*.jar"/>
        </fileset>
        <fileset dir="${dir.sdk}/java/junit">
            <include name="*.jar"/>
        </fileset>
        <fileset dir="${dir.sdk}/java/junit-addons-1.4">
            <include name="*.jar"/>
        </fileset>

        <pathelement location="${dir.sdk}/java/apache-tomcat-6.0.20/bin/bootstrap.jar"/>
        <pathelement location="${dir.sdk}/java/commons-cli-1.0.jar"/>
        <pathelement location="${dir.sdk}/java/commons-collections-3.2.1/commons-collections-3.2.1.jar"/>
        <pathelement location="${dir.sdk}/java/commons-configuration-1.5/commons-configuration-1.5.jar"/>
        <pathelement location="${dir.sdk}/java/commons-dbcp-1.2.2/commons-dbcp-1.2.2.jar"/>
        <pathelement location="${dir.sdk}/java/commons-lang-2.4/commons-lang-2.4.jar"/>
        <pathelement location="${dir.sdk}/java/commons-logging-1.1/commons-logging-1.1.jar"/>
        <pathelement location="${dir.sdk}/java/commons-pool-1.5.4/commons-pool-1.5.4.jar"/>
        <pathelement location="${dir.sdk}/java/Jama-1.0.1.jar"/>
        <pathelement location="${dir.sdk}/java/jaxmejs-0.5/jaxmejs-0.5.jar"/>
        <pathelement location="${dir.sdk}/java/jaxp.jar"/>
        <pathelement location="${dir.sdk}/java/jcommon-0.9.5.jar"/>
        <pathelement location="${dir.sdk}/java/jdbc/*.jar"/>
        <pathelement location="${dir.sdk}/java/jdom.jar"/>
        <pathelement location="${dir.sdk}/java/jencks/*.jar"/>
        <pathelement location="${dir.sdk}/java/jfreechart-0.9.20.jar"/>
        <pathelement location="${dir.sdk}/java/junit/*.jar"/>
        <pathelement location="${dir.sdk}/java/junit-addons-1.4/*.jar"/>
        <pathelement location="${dir.sdk}/java/jtds/jtds-1.2.3-dist/jtds-1.2.3.jar"/>
        <pathelement location="${dir.sdk}/java/log4j/log4j-1.2.15.jar"/>
        <pathelement location="${dir.sdk}/java/lpsolve55j.jar"/>

        <pathelement location="${dir.sdk}/java/spring/spring-core-2.5.6-sources.jar"/>
        <pathelement location="${dir.sdk}/java/spring/spring-beans-2.5.6-sources.jar"/>
        <pathelement location="${dir.sdk}/java/spring/spring-aop-2.5.6.SEC01-sources.jar"/>
        <pathelement location="${dir.sdk}/java/spring/xbean-spring-3.6-sources.jar"/>
        <pathelement location="${dir.sdk}/java/spring/spring-tx-2.5.6-sources.jar"/>
        <pathelement location="${dir.sdk}/java/spring/spring-oxm-tiger-1.5.8.jar"/>
        <pathelement location="${dir.sdk}/java/spring/spring-osgi-core-1.2.1.jar"/>
        <pathelement location="${dir.sdk}/java/spring/spring-context-2.5.6.SEC01-sources.jar"/>
        <pathelement location="${dir.sdk}/java/spring/spring-aop-2.5.6.jar"/>
        <pathelement location="${dir.sdk}/java/spring/spring-jms-2.5.6.SEC01-sources.jar"/>
        <pathelement location="${dir.sdk}/java/spring/spring-context-2.5.6.jar"/>
        <pathelement location="${dir.sdk}/java/spring/spring-beans-2.5.6.jar"/>
        <pathelement location="${dir.sdk}/java/spring/spring-core-2.5.6.jar"/>
        <pathelement location="${dir.sdk}/java/spring/spring-jms-2.5.6.jar"/>
        <pathelement location="${dir.sdk}/java/spring/xbean-spring-3.6.jar"/>
        <pathelement location="${dir.sdk}/java/spring/spring-tx-2.5.6.jar"/>
        <pathelement location="${dir.sdk}/java/spring/spring-oxm-tiger-1.5.8-sources.jar"/>

        <pathelement location="${dir.sdk}/java/xerces.jar"/>
        <pathelement location="${dir.sdk}/java/xplookandfeel.jar"/>
    </path>

    <!-- ================================================================= -->
    <!-- Common classpath                                                  -->
    <!-- ================================================================= -->
    <path id="project-classpath">
        <fileset dir="${dir.sdk}/cti_libs">
            <include name="**/*.jar"/>
        </fileset>
        <pathelement location="${dir.sdk}/Genesys/TLibrary7.1/genji.jar"/>
        <pathelement location="Release/Envision.jar"/>
        <pathelement location="Release/license.jar"/>
        <pathelement location="src/tools/genstubskel"/>
    </path>

    <!-- \\Bigfoot\Engineering\ProductBuilds -->
    <pathconvert targetos="windows" property="dir.products.converted">
        <path path="${dir.products}"/>
    </pathconvert>

    <!-- TODO delete me -->
    <target name="get-head-revision"/>

    <!-- TODO aggregate these -timc 9/20/2010 -->
    <target name="official-build">
        <antcall target="begin"/>

        <!-- no nuke-workdir for Bamboo
        <antcall target="nuke-workdir"/> -->

        <!-- <antcall target="fetch-source"/> -->
        <antcall target="change-version"/>
        <antcall target="create-release-dir"/>
        <antcall target="build-jars"/>
        <antcall target="compile-genstubskel-jar"/>
        <antcall target="genstubskel-suite"/>
        <antcall target="copy-jar-resources"/>
        <antcall target="build-jars"/>
        <antcall target="generate-dbschemas"/>
        <antcall target="make-CPP"/>
        <antcall target="make-ServiceMonitor"/>
        <antcall target="sign-EnvisionControls_CAB"/>
        <antcall target="touch-build"/>
        <antcall target="setup-installers"/>
        <!-- <antcall target="commit-all"/> -->
        <antcall target="publish-unit-test-results"/>
        <antcall target="email-build-complete"/>
        <antcall target="tag-build"/>

        <!-- no move-workdir for Bamboo
        <antcall target="move-workdir-postbuild"/> -->

        <!-- <antcall target="end"/> -->
    </target>

    <!-- ================================================================= -->
    <!-- Rebuild Project                                                   -->
    <!-- ================================================================= -->
    <target name="rebuild">
        <antcall target="del-stubskel"/>
        <antcall target="create-release-dir"/>
        <antcall target="build-jars"/>
        <antcall target="compile-genstubskel-jar"/>
        <antcall target="genstubskel-suite"/>
        <antcall target="copy-jar-resources"/>
        <antcall target="build-jars"/>
        <antcall target="generate-dbschemas"/>
        <antcall target="make-CPP"/>
        <antcall target="sign-EnvisionControls_CAB"/>
    </target>

    <!-- ================================================================= -->
    <!-- Begin build tasks                                                 -->
    <!-- ================================================================= -->
    <target name="begin">
        <!-- See Java's SimpleDateFormat for formatting details -->
        <tstamp>
            <format property="time.start" pattern="yyyy-MM-dd',' HH:mm:ss" locale="en_US"/>
        </tstamp>
        <echo>[${env.COMPUTERNAME}] Build started: ${time.start}</echo>
    </target>

    <!-- ================================================================= -->
    <!-- Build C++ project                                                 -->
    <!-- ================================================================= -->
    <!-- TODO Each target should depend on init.  init should check that the
    properties in propset are set, and only call that target if they are not.
    -->
    <!-- Dependencies:
    - make-AgentSupport (rather, reporting\controls\WebUtilsCtl.h) needs
    WebControls_h.h, which seems to come from make-WebControls_OCX
    -->
    <!-- TODO I don't know when I added the comment about build-CPP being old
    skool, but with the discovery that antcall does not propagate the
    environment, it becomes an even better idea. -timc, Cinco de Mayo 2010 -->
    <target name="build-CPP"
        depends="make-RO,
        make-Serializable_LIB,
        make-Generated,
        make-RegUtils,
        make-SharedResources,
        make-Shared_LIB,
        make-UserTree_LIB,
        make-NotificationWindow_LIB,
        make-ContactSourceUtilities_LIB,
        make-NativeServiceWin32,
        make-AgentAutomation,
        make-EnvisionService,
        make-SourceRunner,
        make-JavaContactSource,
        make-ChannelManager,
        make-DialogicChannel60,
        make-CiscoICM,
        make-TSAPI,
        make-XFloorWnd,
        sign-AgentX_OCX,
        sign-AgentSchedule_OCX,
        sign-AgentAdherence_OCX,
        sign-C2CReportingControls_OCX,
        sign-WebControls_OCX,
        make-SmartAgentErrs,
        make-AgentSupport,
        make-Administrator,
        make-eLearning,
        make-QualityMonitoring,
        make-WFM"/>

    <!-- ================================================================= -->
    <!-- Build C#                                                          -->
    <!-- ================================================================= -->
    <!-- TODO VIPER -timc 9/20/2010 -->
    <target name="build-CSharp">
        <antcall target="make-Server_CS"/>
        <antcall target="make-APICommon_CS"/>
        <antcall target="make-Finder_CS"/>

        <antcall target="make-CallTagger_CS"/>
        <antcall target="make-FinderClient_CS"/>
        <antcall target="make-TaggingClient_CS"/>
        <antcall target="make-Portal_CS"/>
        <antcall target="make-ADIT"/>
        <antcall target="make-DBMigration_v1"/>
        <!-- <antcall target="make-DBMigration_v2"/> -->
        <antcall target="make-EvaluationConsistencyCheck"/>
        <antcall target="make-AutoTagger"/>
        <antcall target="make-AGMS"/>
        <antcall target="make-DADI"/>
        <antcall target="make-WMWrapperService"/>
        <antcall target="make-Centricity"/>
        <antcall target="publish-AVPlayer"/>
        <antcall target="publish-RecordingDownloadTool"/>
        <antcall target="sign-EnvisionCLR"/>

        <antcall target="make-DeployAnalyticsTool"/>
        <antcall target="sign-AnalyticsResources"/>
        <antcall target="sign-AnalyticsUtilities"/>

        <antcall target="make-Speech"/>
    </target>

    <!-- ================================================================= -->
    <!-- Build C# unit test projects                                       -->
    <!-- ================================================================= -->
    <target name="build-CSUnitTests" description="Build the C# unit test projects">
        <build-cpp solution.file="src/tests/DotNetUnitTests/DotNetUnitTests.sln"/>
    </target>

    <!-- ================================================================= -->
    <!-- Build loaders project                                             -->
    <!-- ================================================================= -->
    <target name="build-Loaders"
        depends="make-cstaLoader, make-ctcLoader6.0, make-ctcLoader7.0, make-hook"/>

    <!-- ================================================================= -->
    <!-- Update all version files                                          -->
    <!-- ================================================================= -->
    <!-- TODO make this target name="..." depends="..." -timc 5/7/2010 -->
    <target name="change-version" description="Update all version files">
        <antcall target="chver-CPP"/>
        <antcall target="chver-CSharp"/>
        <antcall target="chver-Java"/>
        <antcall target="chver-AVPlayer"/>
        <antcall target="chver-RecordingDownloadTool"/>
        <antcall target="chver-EnvisionControls_INF"/>
    </target>

    <!-- ================================================================= -->
    <!-- Change AVPlayer product version                                   -->
    <!-- ================================================================= -->
    <!-- example: all on one line
        "C:\Source\buildtools\branches\9.4\base\bin\Insert.exe" -x80
        -s":x3cApplicationVersion:x3e9.4.0000.0:x3c:x2fApplicationVersion:x3e"
        -r":x3cApplicationVersion:x3e9.4.0000.1:x3c:x2fApplicationVersion:x3e"
        -o AVPlayer.csproj -->
    <!-- this is Centricity web application #1 -->
    <target name="chver-AVPlayer">
        <property name="AVPlayer_csproj"
            value="src/clients/AVPlayer/AVPlayer.csproj"/>
        <exec executable="insert.exe" vmlauncher="${vmlauncher}">
            <arg line="-c80
                -s:x3cApplicationVersion:x3e${version.previous}:x3c:x2fApplicationVersion:x3e
                -r:x3cApplicationVersion:x3e${version.product}:x3c:x2fApplicationVersion:x3e
                -o ${AVPlayer_csproj}"/>
        </exec>
    </target>

    <!-- ================================================================= -->
    <!-- Change C++ product versions                                       -->
    <!-- ================================================================= -->
    <!-- TODO Consider adding description to make target public -->
    <!-- #define _PRODUCT_VERSION 9,0,0300,4 -->
    <!-- #define _PRODUCT_VER_STR "9.0.0300.4\0" -->
    <!-- #define _PRODUCT_VER_LOGIN_STR "9.0.0300.4\0" -->
    <!-- #define _PRODUCT_ABOUT "Version 9.0.0300.4\0" -->
    <target name="chver-CPP">
        <property name="version_info_h" value="src/include/version_info.h"/>
        <exec executable="insert.exe" vmlauncher="${vmlauncher}">
            <arg line="-c40
                -s:x20_PRODUCT_VERSION:x20${p_MAJOR}:x2C${p_MINOR}:x2C${p_RELEASE}:x2C${p_BUILD}
                -r:x20_PRODUCT_VERSION:x20${MAJOR}:x2C${MINOR}:x2C${RELEASE}:x2C${BUILD}
                -o ${version_info_h}"/>
        </exec>
        <exec executable="insert.exe" vmlauncher="${vmlauncher}">
            <arg line="-c40
                -s:x20_PRODUCT_VER_STR:x20:x22${p_MAJOR}.${p_MINOR}.${p_RELEASE}.${p_BUILD}
                -r:x20_PRODUCT_VER_STR:x20:x22${version.product}
                -o ${version_info_h}"/>
        </exec>
        <exec executable="insert.exe" vmlauncher="${vmlauncher}">
            <arg line="-c40
                -s:x20_PRODUCT_VER_LOGIN_STR:x20:x22${p_MAJOR}.${p_MINOR}.${p_RELEASE}.${p_BUILD}
                -r:x20_PRODUCT_VER_LOGIN_STR:x20:x22${version.product}
                -o ${version_info_h}"/>
        </exec>
        <exec executable="insert.exe" vmlauncher="${vmlauncher}">
            <arg line="-c40
                -s:x20_PRODUCT_ABOUT:x20:x22Version:x20${p_MAJOR}.${p_MINOR}.${p_RELEASE}.${p_BUILD}
                -r:x20_PRODUCT_ABOUT:x20:x22Version:x20${version.product}
                -o ${version_info_h}"/>
        </exec>
    </target>

    <!-- ================================================================= -->
    <!-- Change C# product versions                                        -->
    <!-- ================================================================= -->
    <!-- TODO Consider adding description to make target public -->
    <!-- public const string MAJOR = "9"; -->
    <!-- public const string MINOR = "0"; -->
    <!-- public const string RELEASE = "0300"; -->
    <!-- public const string BUILD = "4"; -->
    <target name="chver-CSharp">
        <property name="version_info_cs"
            value="src/server/com/et/versioninfo/VersionInfo.cs"/>
        <exec executable="insert.exe" vmlauncher="${vmlauncher}">
            <arg line="-c30
                -s:x20MAJOR:x20=:x20:x22${p_MAJOR}:x22;
                -r:x20MAJOR:x20=:x20:x22${MAJOR}:x22;
                -o ${version_info_cs}"/>
        </exec>
        <exec executable="insert.exe" vmlauncher="${vmlauncher}">
            <arg line="-c30
                -s:x20MINOR:x20=:x20:x22${p_MINOR}:x22;
                -r:x20MINOR:x20=:x20:x22${MINOR}:x22;
                -o ${version_info_cs}"/>
        </exec>
        <!-- prn20765: this is incompatible with VersionInfo.cs, and probably
        broken.  I just opened the PRN, so we'll see what comes of it.  WFM
        and BI use this file. -->
        <exec executable="insert.exe" vmlauncher="${vmlauncher}">
            <arg line="-c30
                -s:x20RELEASE:x20=:x20:x22${p_RELEASE}:x22;
                -r:x20RELEASE:x20=:x20:x22${RELEASE}:x22;
                -o ${version_info_cs}"/>
        </exec>
        <exec executable="insert.exe" vmlauncher="${vmlauncher}">
            <arg line="-c30
                -s:x20BUILD:x20=:x20:x22${p_BUILD}:x22;
                -r:x20BUILD:x20=:x20:x22${BUILD}:x22;
                -o ${version_info_cs}"/>
        </exec>

        <!-- prn18732 (in 9.0.4) hopefully temporary workaround -->
        <property name="daisy_version_cs_SERVER"
            value="src/server/com/et/wfm/daisy/DaisyVersion.cs"/>
        <!-- clients/wfm/WFMClient/com/et/daisy/DaisyVersion.cs -->
        <exec executable="insert.exe" vmlauncher="${vmlauncher}">
            <arg line="-c30
                -s:x20MAJOR:x20=:x20${p_MAJOR};
                -r:x20MAJOR:x20=:x20${MAJOR};
                -o ${daisy_version_cs_SERVER}"/>
        </exec>
        <exec executable="insert.exe" vmlauncher="${vmlauncher}">
            <arg line="-c30
                -s:x20MINOR:x20=:x20${p_MINOR};
                -r:x20MINOR:x20=:x20${MINOR};
                -o ${daisy_version_cs_SERVER}"/>
        </exec>
        <exec executable="insert.exe" vmlauncher="${vmlauncher}">
            <arg line="-c30
                -s:x20RELEASE:x20=:x20${p_RELEASE};
                -r:x20RELEASE:x20=:x20${RELEASE};
                -o ${daisy_version_cs_SERVER}"/>
        </exec>
        <exec executable="insert.exe" vmlauncher="${vmlauncher}">
            <arg line="-c30
                -s:x20BUILD:x20=:x20${p_BUILD};
                -r:x20BUILD:x20=:x20${BUILD};
                -o ${daisy_version_cs_SERVER}"/>
        </exec>

        <!-- prn18732 (in 9.0.4) hopefully temporary workaround -->
        <property name="daisy_version_cs_CLIENT"
            value="src/clients/wfm/WFMClient/com/et/daisy/DaisyVersion.cs"/>
        <exec executable="insert.exe" vmlauncher="${vmlauncher}">
            <arg line="-c30
                -s:x20MAJOR:x20=:x20${p_MAJOR};
                -r:x20MAJOR:x20=:x20${MAJOR};
                -o ${daisy_version_cs_CLIENT}"/>
        </exec>
        <exec executable="insert.exe" vmlauncher="${vmlauncher}">
            <arg line="-c30
                -s:x20MINOR:x20=:x20${p_MINOR};
                -r:x20MINOR:x20=:x20${MINOR};
                -o ${daisy_version_cs_CLIENT}"/>
        </exec>
        <exec executable="insert.exe" vmlauncher="${vmlauncher}">
            <arg line="-c30
                -s:x20RELEASE:x20=:x20${p_RELEASE};
                -r:x20RELEASE:x20=:x20${RELEASE};
                -o ${daisy_version_cs_CLIENT}"/>
        </exec>
        <exec executable="insert.exe" vmlauncher="${vmlauncher}">
            <arg line="-c30
                -s:x20BUILD:x20=:x20${p_BUILD};
                -r:x20BUILD:x20=:x20${BUILD};
                -o ${daisy_version_cs_CLIENT}"/>
        </exec>
    </target>

    <!-- ================================================================= -->
    <!-- Change EnvisionControls.inf product version                       -->
    <!-- ================================================================= -->
    <target name="chver-EnvisionControls_INF">
        <!-- FileVersion=9,0,0,504 -->
        <property name="EnvisionControls_INF"
            value="setup/Signature/EnvisionControls.inf"/>
        <exec executable="insert.exe" vmlauncher="${vmlauncher}">
            <arg line="-c80
                -sFileVersion:x3d${p_MAJOR},${p_MINOR},${p_RELEASE},${p_BUILD}
                -rFileVersion:x3d${MAJOR},${MINOR},${RELEASE},${BUILD}
                -o ${EnvisionControls_INF}"/>
        </exec>
    </target>

    <!-- ================================================================= -->
    <!-- Change Java product versions                                      -->
    <!-- ================================================================= -->
    <!-- TODO Consider adding description to make target public -->
    <!-- Note: prn18358 Only RELEASE was changed to a String -->
    <!-- public static final int MAJOR = 9; -->
    <!-- public static final int MINOR = 0; -->
    <!-- public static final String RELEASE = "0300"; -->
    <!-- public static final int BUILD = 4; -->
    <target name="chver-Java">
        <property name="ProductVersion_java" value="src/server/com/et/startup/ProductVersion.java"/>
        <exec executable="insert.exe" vmlauncher="${vmlauncher}">
            <arg line="-c30
                -s:x20MAJOR:x20=:x20${p_MAJOR};
                -r:x20MAJOR:x20=:x20${MAJOR};
                -o ${ProductVersion_java}"/>
        </exec>
        <exec executable="insert.exe" vmlauncher="${vmlauncher}">
            <arg line="-c30
                -s:x20MINOR:x20=:x20${p_MINOR};
                -r:x20MINOR:x20=:x20${MINOR};
                -o ${ProductVersion_java}"/>
        </exec>
        <exec executable="insert.exe" vmlauncher="${vmlauncher}">
            <arg line="-c30
                -s:x20RELEASE:x20=:x20:x22${p_RELEASE}:x22;
                -r:x20RELEASE:x20=:x20:x22${RELEASE}:x22;
                -o ${ProductVersion_java}"/>
        </exec>
        <exec executable="insert.exe" vmlauncher="${vmlauncher}">
            <arg line="-c30
                -s:x20BUILD:x20=:x20${p_BUILD};
                -r:x20BUILD:x20=:x20${BUILD};
                -o ${ProductVersion_java}"/>
        </exec>
    </target>

    <!-- ================================================================= -->
    <!-- Change RecordingDownloadTool product version                      -->
    <!-- ================================================================= -->
    <!-- this is Centricity web application #2 -->
    <target name="chver-RecordingDownloadTool">
        <property name="RecordingDownloadTool_csproj"
            value="src/clients/RecordingDownloadTool/RecordingDownloadTool.csproj"/>
        <exec executable="insert.exe" vmlauncher="${vmlauncher}">
            <arg line="-c80
                -s:x3cApplicationVersion:x3e${version.previous}:x3c:x2fApplicationVersion:x3e
                -r:x3cApplicationVersion:x3e${version.product}:x3c:x2fApplicationVersion:x3e
                -o ${RecordingDownloadTool_csproj}"/>
        </exec>
    </target>

    <!-- ================================================================= -->
    <!-- Commit all version and installer project files                    -->
    <!-- ================================================================= -->
    <!-- depends="change-version,setup-installers" -->
    <!-- TODO need a dependency here?  It's tricky, because at least
    setup-installers will rebuild all the installers, whether they're up to
    date or not. -->
    <target name="commit-all" description="Commit all version and installer project files">
        <svn username="buildmgr" password="buildmgr">
            <commit message="00000: Version header and installer file commit for build ${version.product}">
                <fileset
                    dir="."
                    includes="
                    src/**/*.csproj
                    src/**/*.cs
                    src/**/*.h
                    src/**/*.java
                    setup/**/*.inf
                    setup/installs/**/*.aip"/>
            </commit>
        </svn>
    </target>

    <!-- ================================================================= -->
    <!-- Commit installer project files                                    -->
    <!-- ================================================================= -->
    <!-- TODO think about adding setup/Signature (or maybe just use setup)
    here to pick up the new EnvisionControls.cab and contents.  And then
    reconsider: why would I want to commit a cab?  Regardless,
    EnvisionControls.inf DOES need to be committed, but not here.  It goes in
    up above with the version file commits.  -->
    <target name="commit-installers" depends="setup-installers">
        <svn username="buildmgr" password="buildmgr">
            <commit dir="${dir.installs}"
                message="00000: Installer project file checkin for build ${version.product}"/>
        </svn>
    </target>

    <!-- ================================================================= -->
    <!-- Commit project files without recompiling the installers           -->
    <!-- ================================================================= -->
    <target name="commit-installers-no-depends">
        <svn username="buildmgr" password="buildmgr">
            <commit dir="${dir.installs}"
                message="00000: Installer project file checkin for build ${version.product}"/>
        </svn>
    </target>

    <!-- ================================================================= -->
    <!-- Commit version files [batch version]                              -->
    <!-- ================================================================= -->
    <!-- TODO remove description to make this "private"? -->
    <target name="commit-version-files" depends="change-version"
        description="Commit all changed src files [intended to pick up only version files]">
        <svn username="buildmgr" password="buildmgr">
            <commit message="00000: Version file checkin for build ${version.product}">
                <!-- fileset needs to include the extensions of all version files -->
                <fileset dir="."
                    includes="**/*.csproj,**/*.cs,**/*.h,**/*.java,**/*.inf"/>
            </commit>
        </svn>
    </target>

    <!-- ================================================================= -->
    <!-- Create the release directory                                      -->
    <!-- ================================================================= -->
    <!-- TODO can we get rid of all of this?  -timc 1/2/2009 -->
    <!-- TODO at least *try* to build the effing thing without it -timc Cinco
    de Mayo 2010 -->
    <target name="create-release-dir" description="Creates Release directories">
        <delete quiet="true" failonerror="false" includeEmptyDirs="true" dir="Release"/>
        <mkdir dir="Release"/>
        <mkdir dir="Release/Admin"/>
        <mkdir dir="Release/Common"/>
    </target>

    <!-- ================================================================= -->
    <!-- Delete Stubs & Skels (rebuild only)                               -->
    <!-- ================================================================= -->
    <target name="del-stubskel">
        <delete verbose="true">
            <fileset dir="." includes="**/*_Skel.* **/*_Stub.* **/*_Dist.*"/>
        </delete>
    </target>

    <!-- ================================================================= -->
    <!-- e-mail build results                                              -->
    <!-- ================================================================= -->
    <!-- The format of the echo message below looks a little odd, but it has
    to be formatted that way to get "normal" looking newlines.
    .
    In case it gets messed up, it's echo plus attributes, newline, then the
    message at column 0 on the following line, then close-echo directly
    following the end of the message. -->

    <target name="email-build-complete" depends="get-head-revision">
        <mail from="buildmgr@envisioninc.com"
            tolist="${mail.to}"
            mailhost="corpserv04.acme.envisiontelephony.com"
            subject="build results, ${version.product} (r${repository.revision})"
            encoding="plain">
            <message>
Build is here: ${dir.products.converted}\${version.product}
Log file is here: ${dir.projects.converted}\logs\build_${version.product}.xml


Compiled from source revision ${repository.revision}


===========================================================
C# Unit Tests Results

${unittest.csharpresults}


Complete log here: ${dir.projects.converted}\unittests\${version.product}_verbose.xml
===========================================================
            </message>
        </mail>
    </target>

    <!-- ================================================================= -->
    <!-- End build tasks                                                   -->
    <!-- ================================================================= -->
    <target name="end">
        <!-- TODO Check if the semaphore file already exists.  This could
        indicate trouble.  (But isn't it too late by this point?) -->
        <!-- See the 'after' method of runbuild.py for details about this. -->
        <echo file="../${version.product}_SUCCESS"/>
        <!-- See Java's SimpleDateFormat for formatting details -->
        <tstamp>
            <format property="time.end" pattern="yyyy-MM-dd',' HH:mm:ss" locale="en_US"/>
        </tstamp>
        <echo>[${env.COMPUTERNAME}] Build completed: ${time.end}</echo>
    </target>

    <!-- ================================================================= -->
    <!-- Generate database schemas                                         -->
    <!-- ================================================================= -->
    <!-- TODO Do something about this. -timc 1/2/2009 -->
    <target name="generate-dbschemas"
        description="Generates Envision database schemas">

        <!-- <echo>workdir=${dir.workdir}</echo> -->
        <exec dir="workdir" executable="cmd.exe" vmlauncher="${vmlauncher}" failonerror="true">
            <arg line="/c GenDBSchemas.bat"/>
        </exec>
    </target>

    <!-- TODO should this go to buildJars.xml? -timc 5/7/2010 -->
    <!-- ================================================================= -->
    <!-- GenStubSkel Suite                                                 -->
    <!-- ================================================================= -->
    <target name="genstubskel-suite" description="genstubskel suite">
        <java classname="genstubskel.GenStubSkel" dir="."
            fork="true" args="GenStubSkel.xml">
            <classpath refid="project-classpath"/>
            <classpath refid="classpath-v2"/>
        </java>
    </target>

    <!-- TODO I'll need to do more work to use this as the default target.  It
    breaks the build runner. -->
    <!-- ================================================================= -->
    <!-- Help                                                              -->
    <!-- ================================================================= -->
    <target name="help" description="Tell user how to get help.">
        <echo message="Please specify at least one target"/>
        <echo message="To run a full build, use 'ant official-build'"/>
        <echo message="Type 'ant -projecthelp' for the full list of public targets"/>
    </target>

    <!-- ================================================================= -->
    <!-- Make ADIT installer                                               -->
    <!-- ================================================================= -->
    <target name="make-ADIT-installer" depends="prepare">
        <build-AI-installer
            product.name="ADIT"
            installer.path="${dir.installs}/ADIT"
            project.file="${dir.installs}/ADIT/ADIT.aip"/>
    </target>

    <!-- ================================================================= -->
    <!-- Make AgentSupport installer                                       -->
    <!-- ================================================================= -->
    <target name="make-AgentSupport-installer" depends="prepare">
        <build-AI-installer
            product.name="AgentSupport"
            installer.path="${dir.installs}/AgentSupport"
            project.file="${dir.installs}/AgentSupport/AgentSupport.aip"/>
    </target>

    <!-- ================================================================= -->
    <!-- Make AGMS installer                                               -->
    <!-- ================================================================= -->
    <target name="make-AGMS-installer" depends="prepare">
        <build-AI-installer
            product.name="AGMS"
            installer.path="${dir.installs}/AGMS"
            project.file="${dir.installs}/AGMS/AGMS.aip"/>
    </target>

    <!-- ================================================================= -->
    <!-- Make Analytics installer                                          -->
    <!-- ================================================================= -->
    <target name="make-Analytics-installer" depends="prepare">
        <build-AI-installer
            product.name="Analytics"
            installer.path="${dir.installs}/Analytics"
            project.file="${dir.installs}/Analytics/Analytics.aip"/>
    </target>

    <!-- ================================================================= -->
    <!-- Make Centricity installer                                         -->
    <!-- ================================================================= -->
    <target name="make-Centricity-installer" depends="prepare,unzip-Centricity_WebHelp">
        <build-AI-installer
            product.name="Centricity"
            installer.path="${dir.installs}/Centricity"
            project.file="${dir.installs}/Centricity/Centricity.aip"/>
    </target>

    <!-- ================================================================= -->
    <!-- Make CentricityQM installer                                       -->
    <!-- ================================================================= -->
    <target name="make-CentricityQM-installer">
        <build-AI-installer
            product.name="CentricityQM"
            installer.path="${dir.installs}/CentricityQM"
            project.file="${dir.installs}/CentricityQM/CentricityQM.aip"/>
    </target>

    <!-- ================================================================= -->
    <!-- Make C# and C++ files                                             -->
    <!-- ================================================================= -->
    <target name="make-CPP" depends="build-CPP, build-CSharp, build-Loaders"/>

    <!-- ================================================================= -->
    <!-- Make DADI installer                                               -->
    <!-- ================================================================= -->
    <target name="make-DADI-installer" depends="prepare">
        <build-AI-installer
            product.name="DADI"
            installer.path="${dir.installs}/DADI"
            project.file="${dir.installs}/DADI/DADI.aip"/>
    </target>

    <!-- ================================================================= -->
    <!-- Make DBMigration installer                                        -->
    <!-- ================================================================= -->
    <target name="make-DBMigration-installer" depends="prepare">
        <build-AI-installer
            product.name="DBMigration"
            installer.path="${dir.installs}/DBMigration"
            project.file="${dir.installs}/DBMigration/DBMigration.aip"/>
    </target>

    <!-- ================================================================= -->
    <!-- Make EvaluationConsistencyCheck (ECC) installer                   -->
    <!-- ================================================================= -->
    <target name="make-ECC-installer" depends="prepare">
        <build-AI-installer
            product.name="EvaluationConsistencyCheck"
            installer.path="${dir.installs}/EvaluationConsistencyCheck"
            project.file="${dir.installs}/EvaluationConsistencyCheck/EvaluationConsistencyCheck.aip"/>
    </target>

    <!-- ================================================================= -->
    <!--  Make Envision CAB files (EN, DE, ES)                             -->
    <!-- ================================================================= -->
    <target name="make-EnvisionControls_CAB">
        <antcall target="make-EnvisionControls_CAB_EN"/>
        <antcall target="make-EnvisionControls_CAB_DE"/>
        <antcall target="make-EnvisionControls_CAB_ES"/>
    </target>

    <!-- English -->
    <target name="make-EnvisionControls_CAB_EN"
        description="Makes EnvisionControls.cab (English) using CabArc">
        <property name="dir.toCab_EN" value="setup/Signature/EN/toCab"/>

        <copy file="setup/Signature/EnvisionControls.inf"
            tofile="${dir.toCab_EN}/EnvisionControls.inf"/>
        <copy file="${dir.sdk}/ISource/_ISource.dll"
            tofile="${dir.toCab_EN}/_ISource.dll"/>
        <copy file="${dir.sdk}/MS/mfc80.dll"
            tofile="${dir.toCab_EN}/mfc80.dll"/>

        <!-- specific to this CAB -->
        <copy file="workdir/Quality/AgentX.ocx"
            tofile="${dir.toCab_EN}/AgentX.ocx"/>
        <copy file="src/clients/reporting/C2CReportingControls/Release/C2CReportingControls.ocx"
            tofile="${dir.toCab_EN}/C2CReportingControls.ocx"/>
        <copy file="workdir/agentdesktop/WebControls.ocx"
            tofile="${dir.toCab_EN}/WebControls.ocx"/>
        <copy file="workdir/quality/SharedResources.dll"
            tofile="${dir.toCab_EN}/SharedResources.dll"/>

        <cab cabfile="setup/Signature/EN/EnvisionControls.cab"
            basedir="${dir.toCab_EN}"
            options="-s 6144"
            includes="AgentX.ocx, C2CReportingControls.ocx, WebControls.ocx,
            EnvisionControls.inf, _ISource.dll, mfc80.dll, SharedResources.dll"
            verbose="yes"/>
    </target>

    <!-- German -->
    <target name="make-EnvisionControls_CAB_DE"
        description="Makes EnvisionControls.cab (German) using CabArc">
        <property name="dir.toCab_DE" value="setup/Signature/DE/toCab"/>

        <copy file="setup/Signature/EnvisionControls.inf"
            tofile="${dir.toCab_DE}/EnvisionControls.inf"/>
        <copy file="${dir.sdk}/ISource/_ISource.dll"
            tofile="${dir.toCab_DE}/_ISource.dll"/>
        <copy file="${dir.sdk}/MS/mfc80.dll"
            tofile="${dir.toCab_DE}/mfc80.dll"/>

        <!-- specific to this CAB -->
        <copy file="src/clients/Quality/agentdesktop/ReleaseGerman/AgentX.ocx"
            tofile="${dir.toCab_DE}/AgentX.ocx"/>
        <copy file="src/clients/reporting/C2CReportingControls/ReleaseGerman/C2CReportingControls.ocx"
            tofile="${dir.toCab_DE}/C2CReportingControls.ocx"/>
        <copy file="src/clients/reporting/controls/ReleaseGerman/WebControls.ocx"
            tofile="${dir.toCab_DE}/WebControls.ocx"/>
        <copy file="src/clients/quality/sharedresources/ReleaseGerman/SharedResources.dll"
            tofile="${dir.toCab_DE}/SharedResources.dll"/>

        <cab cabfile="setup/Signature/DE/EnvisionControls.cab"
            basedir="${dir.toCab_DE}"
            options="-s 6144"
            includes="AgentX.ocx, C2CReportingControls.ocx, WebControls.ocx,
            EnvisionControls.inf, _ISource.dll, mfc80.dll, SharedResources.dll"
            verbose="yes"/>
    </target>

    <!-- Spanish -->
    <target name="make-EnvisionControls_CAB_ES"
        description="Makes EnvisionControls.cab (Spanish) using CabArc">
        <property name="dir.toCab_ES" value="setup/Signature/ES/toCab"/>

        <copy file="setup/Signature/EnvisionControls.inf"
            tofile="${dir.toCab_ES}/EnvisionControls.inf"/>
        <copy file="${dir.sdk}/ISource/_ISource.dll"
            tofile="${dir.toCab_ES}/_ISource.dll"/>
        <copy file="${dir.sdk}/MS/mfc80.dll"
            tofile="${dir.toCab_ES}/mfc80.dll"/>

        <!-- specific to this CAB -->
        <copy file="src/clients/Quality/agentdesktop/ReleaseSpanish/AgentX.ocx"
            tofile="${dir.toCab_ES}/AgentX.ocx"/>
        <copy file="src/clients/reporting/C2CReportingControls/ReleaseSpanish/C2CReportingControls.ocx"
            tofile="${dir.toCab_ES}/C2CReportingControls.ocx"/>
        <copy file="src/clients/reporting/controls/ReleaseSpanish/WebControls.ocx"
            tofile="${dir.toCab_ES}/WebControls.ocx"/>
        <copy file="src/clients/quality/sharedresources/ReleaseSpanish/SharedResources.dll"
            tofile="${dir.toCab_ES}/SharedResources.dll"/>

        <cab cabfile="setup/Signature/ES/EnvisionControls.cab"
            basedir="${dir.toCab_ES}"
            options="-s 6144"
            includes="AgentX.ocx, C2CReportingControls.ocx, WebControls.ocx,
            EnvisionControls.inf, _ISource.dll, mfc80.dll, SharedResources.dll"
            verbose="yes"/>
    </target>

    <!-- ================================================================= -->
    <!-- Make PerformanceSuite installer                                   -->
    <!-- ================================================================= -->
    <target name="make-PerformanceSuite-installer"
        depends="prepare, unzip-BI_WebHelp, unzip-Envision_JRE, unzip-PerformanceSuite-jars_ZIP">
        <build-AI-installer
            product.name="PerformanceSuite"
            installer.path="${dir.installs}/PerformanceSuite"
            project.file="${dir.installs}/PerformanceSuite/PerformanceSuite.aip"/>
    </target>

    <!-- ================================================================= -->
    <!-- Make Server installer                                             -->
    <!-- ================================================================= -->
    <target name="make-Server-installer"
        depends="prepare, unzip-WebHelp, unzip-Envision_JRE, unzip-Server-jars_ZIP">
        <build-AI-installer
            product.name="Server"
            installer.path="${dir.installs}/Server"
            project.file="${dir.installs}/Server/Server.aip"/>
    </target>

    <!-- ================================================================= -->
    <!-- Make ServiceMonitor                                               -->
    <!-- ================================================================= -->
    <target name="make-ServiceMonitor" description="Compiles ServiceMonitor using MSBuild">
        <exec executable="${compiler.msbuild}" vmlauncher="${vmlauncher}" failonerror="true">
            <arg line="/target:Build src/tools/EnvisionServiceMonitor/EnvisionServiceMonitor.sln /property:Configuration=Release /l:FileLogger,Microsoft.Build.Engine;logfile=BuildLog.txt;append=true"/>
        </exec>
    </target>

    <!-- ================================================================= -->
    <!-- Make SpeechProcessingClient installer                             -->
    <!-- ================================================================= -->
    <target name="make-SpeechProcessingClient-installer" depends="prepare,unzip-NuanceProfile">
        <build-AI-installer
            product.name="SpeechProcessingClient"
            installer.path="${dir.installs}/SpeechProcessingClient"
            project.file="${dir.installs}/SpeechProcessingClient/SpeechProcessingClient.aip"/>
    </target>

    <!-- ================================================================= -->
    <!-- Make SpeechServerService installer                                -->
    <!-- ================================================================= -->
    <target name="make-SpeechServerService-installer" depends="prepare">
        <build-AI-installer
            product.name="SpeechServerService"
            installer.path="${dir.installs}/SpeechServerService"
            project.file="${dir.installs}/SpeechServerService/SpeechServerService.aip"/>
    </target>

    <!-- ================================================================= -->
    <!-- Make WMWrapperService installer                                   -->
    <!-- ================================================================= -->
    <target name="make-WMWrapperService-installer" depends="prepare">
        <build-AI-installer
            product.name="WMWrapperService"
            installer.path="${dir.installs}/WMWrapperService"
            project.file="${dir.installs}/WMWrapperService/WMWrapperService.aip"/>
    </target>

    <!-- ================================================================= -->
    <!-- Prepare the release share for the installers                      -->
    <!-- ================================================================= -->
    <!-- This is an official-build target.  It should not be used for
    rebuilds. -timc 2/17/2011 -->
    <target name="prepare" description="Prepare the release share for the installers">
        <mkdir dir="${dir.products}/${version.product}"/>
        <!-- assign these properties sooner so they can be used by the
        sub-targets (release-ADIT, release-DADI, etc.) as well as by
        release-installers -->
        <property name="target1" value="${dir.products}/${version.product}/CD1"/>
        <property name="target2" value="${dir.products}/${version.product}/CD2"/>
        <property name="target3" value="${dir.products}/${version.product}/CD3"/>
        <property name="target4" value="${dir.products}/${version.product}/CD4"/>
        <property name="dir.retired" value="${target2}/Retired"/>
        <property name="dir.utils" value="${target2}/utils"/>
        <property name="dir.nuasis-plugin" value="${target2}/utils/Nuasis"/>
    </target>

    <!-- ================================================================= -->
    <!-- Publish C# unit test results                                      -->
    <!-- ================================================================= -->
    <target name="publish-CSUnitTests" depends="run-CSUnitTests"
        description="Publish the results of the C# unit tests">

        <!-- Copy the summary and verbose results to the projects folder -->
        <copy file="src/tests/DotNetUnitTests/UT_BLL/bin/Release/results_summary.txt"
            tofile="${dir.projects.converted}/unittests/${version.product}_summary.txt"/>
        <copy file="src/tests/DotNetUnitTests/UT_BLL/bin/Release/results_verbose.xml"
            tofile="${dir.projects.converted}/unittests/${version.product}_verbose.xml"/>
    </target>

    <!-- ================================================================= -->
    <!-- build, run, and publish the unit test results                     -->
    <!-- ================================================================= -->
    <!-- <target name="publish-unit-test-results" depends="propset" -->
    <target name="publish-unit-test-results"
        description="Publishes the results of the unit tests">
        <!-- publish the results for the c# unit tests -->
        <antcall target="publish-CSUnitTests"/>

        <!-- this is where JUnit test results can be published -->

        <!-- load the results summary into a property -->
        <loadfile property="unittest.csharpresults"
            srcFile="${dir.projects.converted}\unittests\${version.product}_summary.txt"/>
    </target>

    <!-- ================================================================= -->
    <!-- Release ADIT installer                                            -->
    <!-- ================================================================= -->
    <!-- TODO append target name with "-installer" -->
    <target name="release-ADIT" depends="make-ADIT-installer">
        <release-AI-installer
            product.name="ADIT"
            installer.path="${dir.installs}/ADIT"
            product.path="${dir.utils}"/>
    </target>

    <!-- ================================================================= -->
    <!-- Release AgentSupport installer                                    -->
    <!-- ================================================================= -->
    <!-- TODO append target name with "-installer" -->
    <target name="release-AgentSupport" depends="make-AgentSupport-installer">
        <release-AI-installer
            product.name="AgentSupport"
            installer.path="${dir.installs}/AgentSupport"
            product.path="${target1}"/>
    </target>

    <!-- ================================================================= -->
    <!-- Release AGMS installer                                            -->
    <!-- ================================================================= -->
    <!-- TODO append target name with "-installer" -->
    <target name="release-AGMS" depends="make-AGMS-installer">
        <release-AI-installer
            product.name="AGMS"
            installer.path="${dir.installs}/AGMS"
            product.path="${dir.utils}"/>
    </target>

    <!-- ================================================================= -->
    <!-- Release Analytics installer                                       -->
    <!-- ================================================================= -->
    <!-- TODO append target name with "-installer" -->
    <target name="release-Analytics" depends="make-Analytics-installer">
        <release-AI-installer
            product.name="Analytics"
            installer.path="${dir.installs}/Analytics"
            product.path="${target2}"/>
    </target>

    <!-- ================================================================= -->
    <!-- Publish CD3                                                       -->
    <!-- ================================================================= -->
    <target name="release-CD3" depends="prepare">
        <copy todir="${target3}">
            <fileset dir="${uncpath.cd3_sources}"/>
        </copy>
    </target>

    <!-- ================================================================= -->
    <!-- Publish CD4                                                       -->
    <!-- ================================================================= -->
    <target name="release-CD4" depends="prepare">
        <copy todir="${target4}">
            <fileset dir="${uncpath.cd4_sources}"/>
        </copy>
        <property name="dir.svcmon"
            value="src/tools/EnvisionServiceMonitor/EnvisionServiceMonitor/bin/Release"/>
        <copy file="${dir.svcmon}/EnvisionServiceMonitor.exe" todir="${target3}/tools"/>
        <copy file="${dir.svcmon}/EnvisionServiceMonitor.exe.config" todir="${target3}/tools"/>
    </target>

    <!-- ================================================================= -->
    <!-- Release Centricity installer                                      -->
    <!-- ================================================================= -->
    <!-- TODO append target name with "-installer" -->
    <target name="release-Centricity" depends="make-Centricity-installer">
        <release-AI-installer
            product.name="Centricity"
            installer.path="${dir.installs}/Centricity"
            product.path="${dir.retired}"/>
    </target>

    <!-- ================================================================= -->
    <!-- Release CentricityQM installer                                    -->
    <!-- ================================================================= -->
    <!-- TODO append target name with "-installer" -->
    <target name="release-CentricityQM" depends="make-CentricityQM-installer">
        <release-AI-installer
            product.name="CentricityQM"
            installer.path="${dir.installs}/CentricityQM"
            product.path="${dir.utils}"/>
    </target>

    <!-- ================================================================= -->
    <!-- Release DADI installer                                            -->
    <!-- ================================================================= -->
    <!-- TODO append target name with "-installer" -->
    <target name="release-DADI" depends="make-DADI-installer">
        <release-AI-installer
            product.name="DADI"
            installer.path="${dir.installs}/DADI"
            product.path="${dir.utils}"/>
    </target>

    <!-- ================================================================= -->
    <!-- Release DBMigration installer                                     -->
    <!-- ================================================================= -->
    <!-- TODO append target name with "-installer" -->
    <target name="release-DBMigration" depends="make-DBMigration-installer">
        <release-AI-installer
            product.name="DBMigration"
            installer.path="${dir.installs}/DBMigration"
            product.path="${dir.utils}"/>
    </target>

    <!-- TODO this may need to be changed to work with 9.6 to present -->
    <!-- ================================================================= -->
    <!-- Release documentation                                             -->
    <!-- ================================================================= -->
    <target name="release-Documentation-CD1" depends="prepare">
        <!-- full documentation to target1 -->
        <copy todir="${target1}/Documentation">
            <fileset dir="Documentation/QuickReference">
                <!-- TODO Can I get rid of this?  It's pointless. -->
                <include name="QRS - CentricityAgentDesktop.pdf"/>
            </fileset>
        </copy>
        <copy todir="${target1}/Documentation/UserGuides">
            <fileset dir="Documentation/UserGuides">
                <exclude name="Install_Upgrade.pdf"/>
            </fileset>
        </copy>
        <!-- ReleaseNotes.pdf with a name change -->
        <copy file="Documentation/ReleaseNotes/ReleaseNotes.pdf"
            tofile="${target1}/Documentation/ReleaseNotes.pdf"/>
        <copy file="Documentation/AdbeRdr70_enu.exe"
            tofile="${target1}/Documentation/AdbeRdr70_enu.exe"/>
    </target>
    <!-- TODO this may need to be changed to work with 9.6 to present -->
    <target name="release-Documentation-CD2" depends="prepare">
        <!-- release notes only to target2 -->
        <copy file="Documentation/ReleaseNotes/ReleaseNotes.pdf"
            tofile="${target2}/Documentation/ReleaseNotes.pdf"/>
        <copy file="Documentation/AdbeRdr70_enu.exe"
            tofile="${target2}/Documentation/AdbeRdr70_enu.exe"/>
    </target>

    <!-- ================================================================= -->
    <!-- Release EvaluationConsistencyCheck (ECC) installer                -->
    <!-- ================================================================= -->
    <!-- TODO append target name with "-installer" -->
    <target name="release-ECC" depends="make-ECC-installer">
        <release-AI-installer
            product.name="EvaluationConsistencyCheck"
            installer.path="${dir.installs}/EvaluationConsistencyCheck"
            product.path="${dir.utils}"/>
        <!-- additional copy operation for this installer only -->
        <!-- <copy todir="${dir.utils}/EvaluationConsistencyCheck/QM"> -->
        <copy todir="${dir.utils}/EPS8.4_QMPublishedTemplateEditor">
            <fileset dir="${dir.installs}/EvaluationConsistencyCheck/QM"/>
        </copy>
    </target>

    <!-- @@@ MOVE TO buildJars.xml @@@ -->
    <!-- ================================================================= -->
    <!-- Release EnvisionPlugin (for Nuasis only)                          -->
    <!-- ================================================================= -->
    <!-- This plugin goes on the customer's PBX to pass contact source
    messages back and forth with the Server -->
    <!-- TODO it would be much nicer if I could add dependencies on
    jar-EnvisionPlugin and have access to property EnvisionPluginBasedir as
    well.  I'd probably have to put all the build files together to do that
    (which is not a bad idea).  As it stands right now, I'm duplicating the
    property name here in case it's not already set (that blows). -->
    <target name="release-EnvisionPlugin" depends="prepare">
        <property name="EnvisionPluginBasedir"
            value="workdir/ContactSourceRunner/EnvisionPlugin/"/>
        <copy file="${EnvisionPluginBasedir}/EnvisionPlugin.jar"
            tofile="${dir.nuasis-plugin}/EnvisionPlugin.jar"/>
    </target>

    <!-- ================================================================= -->
    <!-- Release PerformanceSuite installer                                -->
    <!-- ================================================================= -->
    <!-- TODO append target name with "-installer" -->
    <target name="release-PerformanceSuite" depends="make-PerformanceSuite-installer">
        <release-AI-installer
            product.name="PerformanceSuite"
            installer.path="${dir.installs}/PerformanceSuite"
            product.path="${target1}"/>
    </target>

    <!-- ================================================================= -->
    <!-- Release SpeechProcessingClient installer                          -->
    <!-- ================================================================= -->
    <!-- TODO append target name with "-installer" -->
    <target name="release-SpeechProcessingClient" depends="make-SpeechProcessingClient-installer">
        <release-AI-installer
            product.name="SpeechProcessingClient"
            installer.path="${dir.installs}/SpeechProcessingClient"
            product.path="${target2}"/>
    </target>

    <!-- ================================================================= -->
    <!-- Release SpeechServerService installer                             -->
    <!-- ================================================================= -->
    <!-- TODO append target name with "-installer" -->
    <target name="release-SpeechServerService" depends="make-SpeechServerService-installer">
        <release-AI-installer
            product.name="SpeechServerService"
            installer.path="${dir.installs}/SpeechServerService"
            product.path="${target2}"/>
    </target>

    <!-- ================================================================= -->
    <!-- Release WMWrapperService installer                                -->
    <!-- ================================================================= -->
    <!-- TODO append target name with "-installer" -->
    <target name="release-WMWrapperService" depends="make-WMWrapperService-installer">
        <release-AI-installer
            product.name="WMWrapperService"
            installer.path="${dir.installs}/WMWrapperService"
            product.path="${target2}"/>
    </target>

    <!-- ================================================================= -->
    <!-- Run C# unit tests                                                 -->
    <!-- ================================================================= -->
    <target name="run-CSUnitTests" depends="build-CSUnitTests"
        description="Run the C# unit tests">

        <!-- Replace the connection string to point to the unit test database -->
        <loadfile srcfile="src/tests/DotNetUnitTests/UT_Release.config" property="unittest.updatedconfig">
            <filterchain>
                <replacetokens begintoken="D" endtoken=";">
                    <token key="ata Source=localhost" value="Data Source=${unittest.sqlserver};"/>
                </replacetokens>
                <replacetokens begintoken="I" endtoken=";">
                    <token key="nitial Catalog=EPS9_Common" value="Initial Catalog=${unittest.sqldb};"/>
                </replacetokens>
            </filterchain>
        </loadfile>
        <echo file="src/tests/DotNetUnitTests/UT_Release.config" message="${unittest.updatedconfig}"/>

        <!-- Delete whatever previous results that may exist -->
        <delete file="src/tests/DotNetUnitTests/UT_BLL/bin/Release/results_summary.txt"/>
        <delete file="src/tests/DotNetUnitTests/UT_BLL/bin/Release/results_verbose.xml"/>

        <!-- Run the unit tests -->
        <exec executable="${unittest.nunit.bin}/nunit-console.exe" vmlauncher="${vmlauncher}" failonerror="false">
            <arg line="src/tests/DotNetUnitTests/UT_Release.nunit
                /xml:src\tests\DotNetUnitTests\UT_BLL\bin\Release\results_verbose.xml"/>
            <redirector output="src\tests\DotNetUnitTests\UT_BLL\bin\Release\results_summary.txt" alwayslog="true"/>
        </exec>
    </target>

    <!-- ================================================================= -->
    <!-- Target for running unit tests                                     -->
    <!-- ================================================================= -->
    <!-- build and run the unit tests -->
    <target name="run-unit-tests"
        description="Builds and runs unit tests">
        <!-- build and run C# unit tests -->
        <ant antfile="unitTests.xml" dir="." target="run-CSUnitTests"/>

        <!-- this is where JUnit tests can go -->
    </target>

    <!-- =========================================================== -->
    <!-- Run the installer software and release the installers       -->
    <!-- =========================================================== -->
    <!-- TODO call release-installers directly -timc, Cinco de Mayo 2010 -->
    <target name="setup-installers"
        description="Create and deploy the installers">
        <!-- <ant antfile="buildSetup.xml" dir="."
            target="release-installers"/> -->
        <antcall target="release-installers"/>
    </target>

    <!-- ================================================================= -->
    <!--  Sign Envision CAB files                                          -->
    <!-- ================================================================= -->
    <!-- TODO VIPER -timc 9/20/2010 -->
    <!-- <target name="sign-EnvisionControls_CAB" depends="propset"> -->
    <target name="sign-EnvisionControls_CAB">
        <antcall target="sign-EnvisionControls_CAB_EN"/>
        <antcall target="sign-EnvisionControls_CAB_DE"/>
        <antcall target="sign-EnvisionControls_CAB_ES"/>
    </target>

    <!-- English -->
    <target name="sign-EnvisionControls_CAB_EN" depends="make-EnvisionControls_CAB_EN"
        description="Signs EnvisionControls.cab (English) using signtool">
        <exec executable="signtool.exe"
            vmlauncher="${vmlauncher}" failonerror="true">
            <arg line="sign /a
                /f ${file.pfx}
                /p ${signtool.password}
                /t ${signtool.timestampurl}
                setup/Signature/EN/EnvisionControls.cab"/>
        </exec>
    </target>
    <!-- German -->
    <target name="sign-EnvisionControls_CAB_DE" depends="make-EnvisionControls_CAB_DE"
        description="Signs EnvisionControls.cab (German) using signtool">
        <exec executable="signtool.exe"
            vmlauncher="${vmlauncher}" failonerror="true">
            <arg line="sign /a
                /f ${file.pfx}
                /p ${signtool.password}
                /t ${signtool.timestampurl}
                setup/Signature/DE/EnvisionControls.cab"/>
        </exec>
    </target>
    <!-- Spanish -->
    <target name="sign-EnvisionControls_CAB_ES" depends="make-EnvisionControls_CAB_ES"
        description="Signs EnvisionControls.cab (Spanish) using signtool">
        <exec executable="signtool.exe"
            vmlauncher="${vmlauncher}" failonerror="true">
            <arg line="sign /a
                /f ${file.pfx}
                /p ${signtool.password}
                /t ${signtool.timestampurl}
                setup/Signature/ES/EnvisionControls.cab"/>
        </exec>
    </target>

    <!-- ================================================================= -->
    <!-- Tag the latest build                                              -->
    <!-- ================================================================= -->
    <!-- Note 1: This target tags the source revision that was originally
    fetched from SVN, and does NOT include the latest version header and
    project file commits by default.  I've decided to be conservative and use
    the checkout revision for build notifications and for the tag.  This
    avoids the potential problem of other commits in the interim, although the
    version headers and the project files are not up to date - too bad I
    guess. -->
    <!-- Note 2: Be sure to use URLs for source and destination.  Tagging with
    a URL source and WC destination took 16 minutes, but tagging with URLs for
    source and destination took 3 seconds. -->
    <!-- Note 3: THIS TARGET FAILS if the parent directories are not already
    present.  svnant does not provide a way to get at the 'parents' option, so
    beware. -->
    <target name="tag-build" depends="get-head-revision"
        description="Tag nightly build with version header and project file commits">
        <tstamp>
            <format property="datestamp" pattern="yyMMdd" locale="en_US"/>
        </tstamp>
        <property name="url.tag"
            value="${url.tags}/${datestamp}-${version.product}-r${repository.revision}"/>
        <echo message="tag-build: ${url.tag}"/>
        <trycatch>
            <try>
                <svn username="buildmgr" password="buildmgr">
                    <mkdir
                        message="00000: Creating tags dir for ${MAJOR}.${MINOR}.${RELEASE} builds"
                        url="${url.tags}"/>
                </svn>
            </try>

            <!-- Catch and release.  This is here to prevent the build from
            failing if svn mkdir fails, which is expected a lot of the time. -->
            <catch/>

            <finally>
                <svn username="buildmgr" password="buildmgr">
                    <copy message="00000: Creating tag for build ${version.product}"
                        srcUrl="${url.src}" destUrl="${url.tag}"
                        revision="${repository.revision}"/>
                </svn>
            </finally>
        </trycatch>
    </target>

    <!-- ================================================================= -->
    <!-- Touch source files                                                -->
    <!-- ================================================================= -->
    <target name="touch-build">
        <touch>
            <fileset dir="."/>
        </touch>
    </target>

    <!-- ================================================================= -->
    <!-- Unzip Agent_Desktop_Webhelp.zip for the Server installer          -->
    <!-- ================================================================= -->
    <target name="unzip-AgentDesktop_WebHelp">
        <unjar src="Documentation/WebHelp/EN/Agent_Desktop_Webhelp.zip"
            dest="Documentation/WebHelp/EN/Agent_Desktop_Webhelp"/>
        <unjar src="Documentation/WebHelp/DE/Agent_Desktop_Webhelp.zip"
            dest="Documentation/WebHelp/DE/Agent_Desktop_Webhelp"/>
        <unjar src="Documentation/WebHelp/ES/Agent_Desktop_Webhelp.zip"
            dest="Documentation/WebHelp/ES/Agent_Desktop_Webhelp"/>
    </target>

    <!-- ================================================================= -->
    <!-- Unzip BI WebHelp for the Server installer                         -->
    <!-- ================================================================= -->
    <!-- BI is not localized -->
    <target name="unzip-BI_WebHelp">
        <unjar src="Documentation/WebHelp/EN/BI_Webhelp.zip"
            dest="Documentation/WebHelp/EN/BI_Webhelp"/>
    </target>

    <!-- ================================================================= -->
    <!-- Unzip Centricity WebHelp for the Server installer                 -->
    <!-- ================================================================= -->
    <!-- TODO VIPER -timc 9/20/2010 -->
    <target name="unzip-Centricity_WebHelp">
        <!-- Maybe later this will become three separate tasks. -->
        <!-- Centricity documentation for Supervisors -->
        <unjar src="Documentation/WebHelp/EN/Centricity_Webhelp.zip"
            dest="Documentation/WebHelp/EN/Centricity_Webhelp"/>
        <unjar src="Documentation/WebHelp/DE/Centricity_Webhelp.zip"
            dest="Documentation/WebHelp/DE/Centricity_Webhelp"/>
        <unjar src="Documentation/WebHelp/ES/Centricity_Webhelp.zip"
            dest="Documentation/WebHelp/ES/Centricity_Webhelp"/>
        <unjar src="Documentation/WebHelp/EN/Agent_Desktop_Centricity_Webhelp.zip"
            dest="Documentation/WebHelp/EN/Agent_Desktop_Centricity_Webhelp"/>
        <unjar src="Documentation/WebHelp/DE/Agent_Desktop_Centricity_Webhelp.zip"
            dest="Documentation/WebHelp/DE/Agent_Desktop_Centricity_Webhelp"/>
        <unjar src="Documentation/WebHelp/ES/Agent_Desktop_Centricity_Webhelp.zip"
            dest="Documentation/WebHelp/ES/Agent_Desktop_Centricity_Webhelp"/>
    </target>

    <!-- ================================================================= -->
    <!-- Unzip Classic reporting WebHelp for the Server installer          -->
    <!-- ================================================================= -->
    <target name="unzip-ClassicReports_WebHelp">
        <unjar src="Documentation/WebHelp/EN/Classic_reports_Webhelp.zip"
            dest="Documentation/WebHelp/EN/Classic_reports_Webhelp"/>
        <unjar src="Documentation/WebHelp/DE/Classic_reports_Webhelp.zip"
            dest="Documentation/WebHelp/DE/Classic_reports_Webhelp"/>
        <unjar src="Documentation/WebHelp/ES/Classic_reports_Webhelp.zip"
            dest="Documentation/WebHelp/ES/Classic_reports_Webhelp"/>
    </target>

    <!-- ================================================================= -->
    <!-- Unzip the "Envision" JRE into the working copy                    -->
    <!-- ================================================================= -->
    <!-- In case you're wondering: this is a repackage of the private JRE from
    jdk-6u14-windows-i586.exe.  As far as I know, we cannot use the public
    JRE, because it's missing bin\client\jvm.dll or bin\server\jvm.dll (I
    forget exactly which, but it's something like that.
    .
    TODO common-buildtools needs to include a version check going forward from
    July09 (9.10).  It should include the JRE and the zipped up JAR files for
    Server and PerformanceSuite.
    .
    PKI09 (9.9) -> 1.6.0_03
    July09 (9.10) -> 1.6.0_14 -->
    <!-- <target name="unzip-Envision_JRE" depends="propset"> -->
    <target name="unzip-Envision_JRE">
        <property name="Envision_JRE" value="jre1.6.0_14-Envision-no-jars.zip"/>
        <unjar src="${dir.jre}/${Envision_JRE}"
            dest="${dir.sdk}/java"/>
    </target>

    <!-- ================================================================= -->
    <!-- Unzip the default Nuance profile for the Speech Server            -->
    <!-- ================================================================= -->
    <!-- TODO VIPER -timc 9/20/2010 -->
    <target name="unzip-NuanceProfile">
        <unjar src="${dir.sdk}/Nuance/Envision.zip"
            dest="workdir/AudioMining"/>
        <unjar src="${dir.sdk}/Nuance/EnvisionEnglishUK.zip"
            dest="workdir/AudioMining"/>
        <unjar src="${dir.sdk}/Nuance/EnvisionGerman.zip"
            dest="workdir/AudioMining"/>
        <exec executable="7za.exe" vmlauncher="${vmlauncher}" failonerror="false">
            <arg line="x ${dir.sdk}/Nuance/EnvisionSpanish.zip -oworkdir/AudioMining"/>
        </exec>
        <exec executable="7za.exe" vmlauncher="${vmlauncher}" failonerror="false">
            <arg line="x ${dir.sdk}/Nuance/EnvisionSpanishLA.zip -oworkdir/AudioMining"/>
        </exec>
    </target>

    <!-- ================================================================= -->
    <!-- Unzip the PerformanceSuite JARs into the working copy             -->
    <!-- ================================================================= -->
    <!-- I decided to keep the JAR files out of the JRE at the level of the
    working copy.  They will be added in by the installer, but this keeps
    things from getting messy.  And it removes an artificial dependency, since
    unzip-Server-jars_ZIP would otherwise depend on unzip-Envision_JRE.
    (make-PerformanceSuite depends on both of them.) -->
    <!-- TODO this needs to be updated.  At least ActiveMQ is out of date,
    possibly others as well. -timc, Cinco de Mayo 2010 -->
    <target name="unzip-PerformanceSuite-jars_ZIP">
        <property name="EPS-jars_ZIP" value="jar-files-EnvisionPerformanceSuite-9.10.zip"/>
        <unjar src="${dir.jre}/${EPS-jars_ZIP}"
            dest="${dir.sdk}/java"/>
    </target>

    <!-- ================================================================= -->
    <!-- Unzip the Server JARs into the working copy                       -->
    <!-- ================================================================= -->
    <!-- I decided to keep the JAR files out of the JRE at the level of the
    working copy.  They will be added in by the installer, but this keeps
    things from getting messy.  And it removes an artificial dependency, since
    unzip-Server-jars_ZIP would otherwise depend on unzip-Envision_JRE.
    (make-Server depends on both of them.) -->
    <target name="unzip-Server-jars_ZIP">
        <property name="Server-jars_ZIP" value="jar-files-EnvisionServer-9.10SP3.zip"/>
        <unjar src="${dir.jre}/${Server-jars_ZIP}"
            dest="${dir.sdk}/java"/>
    </target>

    <!-- ================================================================= -->
    <!-- Unzip WebHelp for the Server installer                            -->
    <!-- ================================================================= -->
    <target name="unzip-WebHelp"
        depends="unzip-AgentDesktop_WebHelp, unzip-BI_WebHelp,
        unzip-Centricity_WebHelp, unzip-ClassicReports_WebHelp"/>

    <!-- ================================================================= -->
    <!-- Run BVT test (build verification test test?) automation           -->
    <!-- ================================================================= -->
    <target name="run-test-automation">
        <exec dir="${dir.bin}" executable="VMWareTests.exe" failonerror="false">
            <arg line="-commonDB PE6850_Common -localDB PE6850_Local -aspNETDB PE6850_ASPNET -hostIP 10.1.6.10 -imageIP 10.1.6.106 -serverName WIN2008-64C -site_retries 15 -emailto keith.myers@envisioninc.com"/>
        </exec>
    </target>

    <!-- ================================================================= -->
    <!-- Compile the BVTs                                                  -->
    <!-- ================================================================= -->
    <!--
    <target name="make-BVTs">
        <property name="compiler.cpp" value="${vs100_devenv}"/>
        <build-cpp solution.file="src/tools/testapps/AgentCentricity/AgentCentricity.sln"/>
        <build-cpp solution.file="src/tools/testapps/CentricityBVT/autotest.sln"/>
        <build-cpp solution.file="src/tools/testapps/ReviewAdvocate/ReviewAdvocate.sln"/>
    </target>
    -->

    <target name="make-BVTs">
        <echo message="dir.projects.converted: ${dir.projects.converted}"/>
        <!-- delete the contents first, directory second -->
        <delete failonerror="False">
            <fileset dir="${dir.projects.converted}\BVTs" erroronmissingdir="False"/>
        </delete>
        <delete failonerror="False" dir="${dir.projects.converted}\BVTs"/>
        <antcall target="make-BVT-AgentCentricity"/>
        <antcall target="make-BVT-CentricityBVT"/>
        <antcall target="make-BVT-ReviewAdvocate"/>
    </target>

    <!-- NOTE have to set vs100_devenv here instead of compiler.cpp, since the
    properties are immutable. -timc 2/9/2011 -->
    <target name="make-BVT-AgentCentricity">
        <exec executable="${vs100_devenv}" vmlauncher="false" failonerror="false">
            <arg line="/build Release
                src/tools/testapps/AgentCentricity/AgentCentricity.sln
                /out BuildLog.txt"/>
        </exec>
        <copy todir="${dir.projects.converted}\BVTs">
            <fileset file="src/tools/testapps/AgentCentricity/AgentCentricity/bin/Release/AgentCentricity.dll"/>
        </copy>
    </target>
    <target name="make-BVT-CentricityBVT">
        <exec executable="${vs100_devenv}" vmlauncher="false" failonerror="false">
            <arg line="/build Release
                src/tools/testapps/CentricityBVT/autotest.sln
                /out BuildLog.txt"/>
        </exec>
        <copy todir="${dir.projects.converted}\BVTs">
            <fileset file="src/tools/testapps/CentricityBVT/autotest/bin/Release/autotest.dll"/>
        </copy>
    </target>
    <target name="make-BVT-ReviewAdvocate">
        <exec executable="${vs100_devenv}" vmlauncher="false" failonerror="false">
            <arg line="/build Release
                src/tools/testapps/ReviewAdvocate/ReviewAdvocate.sln
                /out BuildLog.txt"/>
        </exec>
        <copy todir="${dir.projects.converted}\BVTs">
            <fileset file="src/tools/testapps/ReviewAdvocate/ReviewAdvocate/bin/Release/ReviewAdvocate.dll"/>
        </copy>
    </target>
</project>

