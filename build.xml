<?xml version="1.0" ?>
<!-- ===================================================================== -->
<!-- Envision build file                                                   -->
<!-- ===================================================================== -->
<project name="EPS" default="official-build" basedir=".">

    <!-- NB: run build.xml from the build subdirectory for now -->

    <!-- ================================================================= -->
    <!-- <Set up the environment (non-targets)>                            -->
    <!-- ================================================================= -->
    <!-- add properties at the top of the build file -->
    <!--
    <property name="dir.build" value=".."/>
    -->
    <!-- build.compiler - WTF? -->
    <!--
    <property name="build.compiler" value="javac1.6"/>
    -->
    <property name="javac.source" value="1.6"/>
    <property name="javac.debug" value="true"/>
    <property name="javac.deprecation" value="false"/>
    <property name="vmlauncher" value="false"/>
    <property name="vs90_devenv" value="C:/Program Files/Microsoft Visual Studio 9.0/Common7/IDE/devenv.com"/>
    <property name="vs100_devenv" value="C:/Program Files/Microsoft Visual Studio 10.0/Common7/IDE/devenv.com"/>
    <!-- TODO this is used in buildC#CPP.xml.  Make sure mc.exe is on the PATH
    -->
    <!-- <property name="compiler.message" value="C:/bin/mc.exe"/> -->
    <!-- TODO don't forget ANT_OPTS environment variable for Java heap space -->
    <!-- ANT_OPTS=-Xmx1024m -->

    <!-- TODO Why do these need to be prefaced with .. (up-dir)?  The Ant docs
    say that without a basedir in the project declaration, "if neither the
    attribute nor the property have been set, the parent directory of the
    buildfile will be used." -->
    <!--
    <property name="dir.src" value="../src"/>
    <property name="dir.workdir" value="../workdir"/>
    -->

    <property name="cert.envision" value="setup/Signature/EnvisionCertificate.pfx"/>
    <property name="signtool.password" value="Envision07"/>
    <property name="signtool.timestampurl"
        value="http://timestamp.verisign.com/scripts/timstamp.dll"/>
    <!-- TODO get rid of this one -->
    <property name="compiler.msbuild" value="C:/Windows/Microsoft.NET/Framework/v3.5/MSBuild.exe"/>
    <!-- <property name="dir.installs" value="setup/installs"/> -->
    <property name="compiler.ai" value="C:/Program Files/Caphyon/Advanced Installer 8.0.2/bin/x86/AdvancedInstaller.com"/>

    <!-- TODO temp for testing only -->
    <property name="dir.products" value="C:\Engineering\build\10.1.0000"/>
    <property name="dir.jre" value="//Bigfoot/Engineering/SDK/Java/JRE"/>
    <property name="version.product" value="10.1.0000.1020"/>

    <!-- ================================================================= -->
    <!-- Make environment variables accessible in build.properties         -->
    <!-- ================================================================= -->
    <!-- http://forums.sun.com/thread.jspa?messageID=4257700 -->
    <property environment="env"/>

    <!-- ================================================================= -->
    <!-- import the other build scripts                                    -->
    <!-- ================================================================= -->
    <!-- <import file="buildJars.xml"/> -->
    <!-- <import file="buildC#CPP.xml"/> -->
    <!-- <import file="buildSetup.xml"/> -->
    <!-- <import file="unitTests.xml"/> -->

    <!-- ================================================================= -->
    <!-- Compile C++ project files (macro)                                 -->
    <!-- ================================================================= -->
    <macrodef name="build-cpp">
        <attribute name="configuration" default="Release"/>
        <attribute name="solution.file"/>
        <attribute name="output.path" default="BuildLog.txt"/>
        <sequential>
            <echo message="Compiling @{configuration} from @{solution.file}"/>
            <exec executable="${vs90_devenv}" failonerror="true">
                <arg line="/build @{configuration} @{solution.file} /out @{output.path}"/>
            </exec>
        </sequential>
    </macrodef>

    <!-- ================================================================= -->
    <!-- Compile AdvancedInstaller project files (macro)                   -->
    <!-- ================================================================= -->
    <!-- <pathconvert targetos="windows" property="compiler.ai.converted">
        <path path="${compiler.ai}"/>
    </pathconvert>
    <echo message="AI compiler path: ${compiler.ai}"/>
    <echo message="AI compiler path (converted): ${compiler.ai.converted}"/> -->
    <!-- TODO pathconvert these guys (not hipri) 1/7/2009 -->
    <!-- some useful bits in the comments here
    http://blog.andrewbeacock.com/2005/08/pretty-printing-java-classpaths-using.html
    -->
    <macrodef name="build-AI-installer">
        <attribute name="product.name"/>
        <attribute name="installer.path"/>
        <attribute name="project.file"/>
        <sequential>
            <echo message="Making installer at @{project.file}"/>
            <mkdir dir="@{installer.path}/newInstall"/>
            <exec dir="@{installer.path}" executable="${compiler.ai}" failonerror="true">
                <arg line="/edit @{project.file} /SetVersion ${version.product}"/>
            </exec>
            <exec dir="@{installer.path}" executable="${compiler.ai}" failonerror="true">
                <arg line="/build @{project.file}"/>
            </exec>
        </sequential>
    </macrodef>

    <!-- ================================================================= -->
    <!-- Release AI installers (macro)                                     -->
    <!-- ================================================================= -->
    <!-- TODO Remove the newInstall bits at some point.  PRN19794 was for
    removing the folders from ProductBuilds, but the ones that are left are on
    the build machine.
    .
    When changing newInstall to install in build-AI-installer and
    release-AI-installer, EVERY installer project file needs to be updated at
    the same time (on the media page).  Open a PRN for it. -timc 1/7/2009 -->
    <macrodef name="release-AI-installer">
        <attribute name="product.name"/>
        <attribute name="installer.path"/>
        <attribute name="product.path"/>
        <sequential>
            <copy todir="@{product.path}">
                <fileset dir="@{installer.path}/newInstall"/>
            </copy>
        </sequential>
    </macrodef>

    <!-- started pulling stuff out right here -->
    <!-- <echo message="INFO setting 10.1 properties (if any)"/> -->
            <property name="dir.sdk" value="${env.ETSDK}"/>

    <!-- <echo message="INFO setting 9.8 properties (if any)"/> -->
    <!-- <property name="compiler.cpp" value="${vs90_devenv}"/> -->
    <!-- <property name="compiler.message" value="${vs90_mc}"/> -->
    <!-- <property name="vscommontools" value="${env.VS90COMNTOOLS}"/> -->

    <!-- <echo message="INFO setting 9.7 properties (if any)"/> -->
    <!-- <property name="file.pfx" value="${cert.envision}"/> -->
    <!-- <property name="signtool.password" value="${signtool.envisionpass}"/> -->
    <!-- stopped here -->

    <!-- ================================================================= -->
    <!-- Classpath for projects that use ActiveMQ 5.1.0 and friends        -->
    <!-- ================================================================= -->
    <path id="classpath-v1">
        <fileset dir="${dir.sdk}/java/activemq-5.1.0">
            <include name="*.jar"/>
        </fileset>
    </path>

    <!-- ================================================================= -->
    <!-- Classpath for projects that use ActiveMQ 5.3.1 and friends        -->
    <!-- ================================================================= -->
    <path id="classpath-v2">
        <fileset dir="${dir.sdk}/java/activemq-5.3.1">
            <include name="*.jar"/>
        </fileset>
        <fileset dir="${dir.sdk}/java/apache-tomcat-6.0.20/lib">
            <include name="*.jar"/>
        </fileset>
        <fileset dir="${dir.sdk}/java/geronimo">
            <include name="*.jar"/>
        </fileset>
        <fileset dir="${dir.sdk}/java/iText">
            <include name="*.jar"/>
        </fileset>
        <fileset dir="${dir.sdk}/java/jdbc">
            <include name="*.jar"/>
        </fileset>
        <fileset dir="${dir.sdk}/java/jencks">
            <include name="*.jar"/>
        </fileset>
        <fileset dir="${dir.sdk}/java/junit">
            <include name="*.jar"/>
        </fileset>
        <fileset dir="${dir.sdk}/java/junit-addons-1.4">
            <include name="*.jar"/>
        </fileset>

        <pathelement location="${dir.sdk}/java/apache-tomcat-6.0.20/bin/bootstrap.jar"/>
        <pathelement location="${dir.sdk}/java/commons-cli-1.0.jar"/>
        <pathelement location="${dir.sdk}/java/commons-collections-3.2.1/commons-collections-3.2.1.jar"/>
        <pathelement location="${dir.sdk}/java/commons-configuration-1.5/commons-configuration-1.5.jar"/>
        <pathelement location="${dir.sdk}/java/commons-dbcp-1.2.2/commons-dbcp-1.2.2.jar"/>
        <pathelement location="${dir.sdk}/java/commons-lang-2.4/commons-lang-2.4.jar"/>
        <pathelement location="${dir.sdk}/java/commons-logging-1.1/commons-logging-1.1.jar"/>
        <pathelement location="${dir.sdk}/java/commons-pool-1.5.4/commons-pool-1.5.4.jar"/>
        <pathelement location="${dir.sdk}/java/Jama-1.0.1.jar"/>
        <pathelement location="${dir.sdk}/java/jaxmejs-0.5/jaxmejs-0.5.jar"/>
        <pathelement location="${dir.sdk}/java/jaxp.jar"/>
        <pathelement location="${dir.sdk}/java/jcommon-0.9.5.jar"/>
        <pathelement location="${dir.sdk}/java/jdbc/*.jar"/>
        <pathelement location="${dir.sdk}/java/jdom.jar"/>
        <pathelement location="${dir.sdk}/java/jencks/*.jar"/>
        <pathelement location="${dir.sdk}/java/jfreechart-0.9.20.jar"/>
        <pathelement location="${dir.sdk}/java/junit/*.jar"/>
        <pathelement location="${dir.sdk}/java/junit-addons-1.4/*.jar"/>
        <pathelement location="${dir.sdk}/java/jtds/jtds-1.2.3-dist/jtds-1.2.3.jar"/>
        <pathelement location="${dir.sdk}/java/log4j/log4j-1.2.15.jar"/>
        <pathelement location="${dir.sdk}/java/lpsolve55j.jar"/>

        <pathelement location="${dir.sdk}/java/spring/spring-core-2.5.6-sources.jar"/>
        <pathelement location="${dir.sdk}/java/spring/spring-beans-2.5.6-sources.jar"/>
        <pathelement location="${dir.sdk}/java/spring/spring-aop-2.5.6.SEC01-sources.jar"/>
        <pathelement location="${dir.sdk}/java/spring/xbean-spring-3.6-sources.jar"/>
        <pathelement location="${dir.sdk}/java/spring/spring-tx-2.5.6-sources.jar"/>
        <pathelement location="${dir.sdk}/java/spring/spring-oxm-tiger-1.5.8.jar"/>
        <pathelement location="${dir.sdk}/java/spring/spring-osgi-core-1.2.1.jar"/>
        <pathelement location="${dir.sdk}/java/spring/spring-context-2.5.6.SEC01-sources.jar"/>
        <pathelement location="${dir.sdk}/java/spring/spring-aop-2.5.6.jar"/>
        <pathelement location="${dir.sdk}/java/spring/spring-jms-2.5.6.SEC01-sources.jar"/>
        <pathelement location="${dir.sdk}/java/spring/spring-context-2.5.6.jar"/>
        <pathelement location="${dir.sdk}/java/spring/spring-beans-2.5.6.jar"/>
        <pathelement location="${dir.sdk}/java/spring/spring-core-2.5.6.jar"/>
        <pathelement location="${dir.sdk}/java/spring/spring-jms-2.5.6.jar"/>
        <pathelement location="${dir.sdk}/java/spring/xbean-spring-3.6.jar"/>
        <pathelement location="${dir.sdk}/java/spring/spring-tx-2.5.6.jar"/>
        <pathelement location="${dir.sdk}/java/spring/spring-oxm-tiger-1.5.8-sources.jar"/>

        <pathelement location="${dir.sdk}/java/xerces.jar"/>
        <pathelement location="${dir.sdk}/java/xplookandfeel.jar"/>
    </path>

    <!-- ================================================================= -->
    <!-- Common classpath                                                  -->
    <!-- ================================================================= -->
    <path id="project-classpath">
        <fileset dir="${dir.sdk}/cti_libs">
            <include name="**/*.jar"/>
        </fileset>
        <pathelement location="${dir.sdk}/Genesys/TLibrary7.1/genji.jar"/>
        <pathelement location="Release/Envision.jar"/>
        <pathelement location="Release/license.jar"/>
        <pathelement location="src/tools/genstubskel"/>
    </path>

    <!-- \\Bigfoot\Engineering\ProductBuilds -->
    <pathconvert targetos="windows" property="dir.products.converted">
        <path path="${dir.products}"/>
    </pathconvert>

    <!-- TODO delete me -->
    <target name="get-head-revision"/>

    <!-- TODO aggregate these -timc 9/20/2010 -->
    <target name="official-build">
        <antcall target="begin"/>

        <!-- no nuke-workdir for Bamboo
        <antcall target="nuke-workdir"/> -->

        <!-- <antcall target="fetch-source"/> -->
        <antcall target="change-version"/>
        <!-- <antcall target="create-release-dir"/> -->
        <antcall target="build-jars"/>
        <antcall target="stubs"/>
        <!--
        <antcall target="compile-genstubskel-jar"/>
        <antcall target="genstubskel-suite"/>
        -->
        <antcall target="copy-jar-resources"/>
        <antcall target="build-jars"/>
        <antcall target="generate-dbschemas"/>
        <antcall target="make-CPP"/>
        <antcall target="make-ServiceMonitor"/>
        <antcall target="sign-EnvisionControls_CAB"/>
        <antcall target="touch-build"/>
        <antcall target="setup-installers"/>
        <!-- <antcall target="commit-all"/> -->
        <antcall target="publish-unit-test-results"/>
        <antcall target="email-build-complete"/>
        <antcall target="tag-build"/>

        <!-- no move-workdir for Bamboo
        <antcall target="move-workdir-postbuild"/> -->

        <!-- <antcall target="end"/> -->
    </target>

    <!-- ================================================================= -->
    <!-- Rebuild Project                                                   -->
    <!-- ================================================================= -->
    <target name="rebuild">
        <antcall target="del-stubskel"/>
        <!-- <antcall target="create-release-dir"/> -->
        <antcall target="build-jars"/>
        <antcall target="stubs"/>
        <!--
        <antcall target="compile-genstubskel-jar"/>
        <antcall target="genstubskel-suite"/>
        -->
        <antcall target="copy-jar-resources"/>
        <antcall target="build-jars"/>
        <antcall target="generate-dbschemas"/>
        <antcall target="make-CPP"/>
        <antcall target="sign-EnvisionControls_CAB"/>
    </target>

    <!-- ================================================================= -->
    <!-- Begin build tasks                                                 -->
    <!-- ================================================================= -->
    <target name="begin">
        <!-- See Java's SimpleDateFormat for formatting details -->
        <tstamp>
            <format property="time.start" pattern="yyyy-MM-dd',' HH:mm:ss" locale="en_US"/>
        </tstamp>
        <echo>[${env.COMPUTERNAME}] Build started: ${time.start}</echo>
    </target>

    <!-- ================================================================= -->
    <!-- Build C++ project                                                 -->
    <!-- ================================================================= -->
    <!-- TODO Each target should depend on init.  init should check that the
    properties in propset are set, and only call that target if they are not.
    -->
    <!-- Dependencies:
    - make-AgentSupport (rather, reporting\controls\WebUtilsCtl.h) needs
    WebControls_h.h, which seems to come from make-WebControls_OCX
    -->
    <!-- TODO I don't know when I added the comment about build-CPP being old
    skool, but with the discovery that antcall does not propagate the
    environment, it becomes an even better idea. -timc, Cinco de Mayo 2010 -->
    <target name="build-CPP"
        depends="make-RO,
        make-Serializable_LIB,
        make-Generated,
        make-RegUtils,
        make-SharedResources,
        make-Shared_LIB,
        make-UserTree_LIB,
        make-NotificationWindow_LIB,
        make-ContactSourceUtilities_LIB,
        make-NativeServiceWin32,
        make-AgentAutomation,
        make-EnvisionService,
        make-SourceRunner,
        make-JavaContactSource,
        make-ChannelManager,
        make-DialogicChannel60,
        make-CiscoICM,
        make-TSAPI,
        make-XFloorWnd,
        sign-AgentX_OCX,
        sign-AgentSchedule_OCX,
        sign-AgentAdherence_OCX,
        sign-C2CReportingControls_OCX,
        sign-WebControls_OCX,
        make-SmartAgentErrs,
        make-AgentSupport,
        make-Administrator,
        make-eLearning,
        make-QualityMonitoring,
        make-WFM"/>

    <!-- ================================================================= -->
    <!-- Build C#                                                          -->
    <!-- ================================================================= -->
    <!-- TODO VIPER -timc 9/20/2010 -->
    <target name="build-CSharp">
        <antcall target="make-Server_CS"/>
        <antcall target="make-APICommon_CS"/>
        <antcall target="make-Finder_CS"/>

        <antcall target="make-CallTagger_CS"/>
        <antcall target="make-FinderClient_CS"/>
        <antcall target="make-TaggingClient_CS"/>
        <antcall target="make-Portal_CS"/>
        <antcall target="make-ADIT"/>
        <antcall target="make-DBMigration_v1"/>
        <!-- <antcall target="make-DBMigration_v2"/> -->
        <antcall target="make-EvaluationConsistencyCheck"/>
        <antcall target="make-AutoTagger"/>
        <antcall target="make-AGMS"/>
        <antcall target="make-DADI"/>
        <antcall target="make-WMWrapperService"/>
        <antcall target="make-Centricity"/>
        <antcall target="publish-AVPlayer"/>
        <antcall target="publish-RecordingDownloadTool"/>
        <antcall target="sign-EnvisionCLR"/>

        <antcall target="make-DeployAnalyticsTool"/>
        <antcall target="sign-AnalyticsResources"/>
        <antcall target="sign-AnalyticsUtilities"/>

        <antcall target="make-Speech"/>
    </target>

    <!-- ================================================================= -->
    <!-- Make JARs                                                         -->
    <!-- ================================================================= -->
    <target name="build-jars">
        <antcall target="clean-Envision"/>
        <antcall target="compile-Envision"/>
        <antcall target="jar-Envision"/>
        <antcall target="release-Envision"/>
        <antcall target="clean-license"/>
        <antcall target="compile-license"/>
        <antcall target="jar-license"/>

        <antcall target="jar-EnvisionPlugin"/>
    </target>

    <!-- ================================================================= -->
    <!-- clean-Envision                                                    -->
    <!-- ================================================================= -->
    <!-- timc: Obsolete?  Maybe not.  We call into this target (and the rest
    of the _Envision targets) twice. -->
    <target name="clean-Envision" description="Deletes compiled classes and jars">
        <delete verbose="true" failonerror="false" includeEmptyDirs="true">
            <fileset dir="src" includes="**/*.class"/>
        </delete>
        <delete verbose="true" failonerror="false" file="Release/Envision.jar"/>
        <delete verbose="true" failonerror="false" file="src/Envision.jar"/>
    </target>

    <!-- ================================================================= -->
    <!-- clean-license                                                     -->
    <!-- ================================================================= -->
    <target name="clean-license" description="Deletes existing compiled classes and jars">
        <delete verbose="true" failonerror="false" includeEmptyDirs="true">
            <fileset dir="src/server/com/et/license/" includes="**/*.class"/>
        </delete>
        <delete verbose="true" failonerror="false" file="src/server/com/et/license/license.jar"/>
    </target>

    <!-- =================================================================== -->
    <!-- compile-genstubskel-jar                                             -->
    <!-- =================================================================== -->
    <target name="compile-genstubskel-jar" description="Compiles genstubskel">
        <javac srcdir="src/tools/genstubskel"
            destdir="src/tools/genstubskel"
            debug="${javac.debug}"
            deprecation="${javac.deprecation}"
            source="${javac.source}"
            optimize="on"
            verbose="true">
            <classpath refid="project-classpath"/>
            <!-- add to the classpath: see build.xml -->
            <classpath refid="classpath-v2"/>
        </javac>
    </target>

    <!-- ================================================================= -->
    <!-- GenStubSkel Suite                                                 -->
    <!-- ================================================================= -->
    <target name="genstubskel-suite" description="genstubskel suite">
        <java classname="genstubskel.GenStubSkel" dir="."
            fork="true" args="GenStubSkel.xml">
            <classpath refid="project-classpath"/>
            <classpath refid="classpath-v2"/>
        </java>
    </target>

    <!-- ================================================================= -->
    <!-- shorty                                                            -->
    <!-- ================================================================= -->
    <target name="stubs" depends="compile-genstubskel-jar, genstubskel-suite"/>

    <!-- ================================================================= -->
    <!-- compile-Envision                                                  -->
    <!-- ================================================================= -->
    <target name="compile-Envision" description="Compiles Envision">
        <!-- TODO fork, memoryInitialSize & memoryMaximumSize need to go to
        build.properties (or, better, to runbuild.py -timc 2/5/2010 -->
        <javac srcdir="src" destdir="src"
            debug="${javac.debug}"
            deprecation="${javac.deprecation}"
            fork="yes"
            memoryInitialSize="200m" memoryMaximumSize="1024m">
            <classpath refid="project-classpath"/>
            <!-- add to the classpath: see build.xml -->
            <classpath refid="classpath-v2"/>
        </javac>

        <!-- TODO do we need this? -->
        <delete verbose="true" failonerror="true"
            file="src/com/et/license/LicenseManager.class"/>
        <delete verbose="true" failonerror="true"
            file="src/server/com/et/license/LicenseManager.class"/>
        <delete verbose="true" failonerror="true"
            file="src/server/com/et/license/jar/LicenseManager.class"/>
    </target>

    <!-- ================================================================= -->
    <!-- compile-license                                                   -->
    <!-- ================================================================= -->
    <target name="compile-license" description="Compiles license">
        <javac srcdir="src/server/com/et/license/"
            destdir="src/server/"
            debug="${javac.debug}"
            deprecation="${javac.deprecation}"
            fork="yes"
            memoryInitialSize="100m"
            memoryMaximumSize="100m" >
            <classpath refid="project-classpath"/>
            <!-- add to the classpath: see build.xml -->
            <classpath refid="classpath-v2"/>
        </javac>
    </target>

    <!-- ================================================================= -->
    <!-- Copy Envision jar resources                                       -->
    <!-- ================================================================= -->
    <target name="copy-jar-resources" description="Copy Envision jar resources">
        <copy todir="src/com/et">
            <fileset dir="src/Server/com/et"
                includes="
                **/*.xml
                **/*.gif
                **/*.jpg
                **/*.png
                **/*.html
                **/*.js
                **/*.ico
                **/*.properties"
                excludes="**/*UTF16.properties"/>
        </copy>
        <copy todir="src/com/et">
            <fileset dir="src/clients/admin/com/et"
                includes="
                **/*.xml
                **/*.gif
                **/*.jpg
                **/*.png
                **/*.html
                **/*.js
                **/*.ico
                **/*.properties"
                excludes="**/*UTF16.properties"/>
        </copy>
        <!-- timc: Nothing with these extensions are present, AFAIK -->
        <!-- correction: few properties files here -timc 2/19/2011 -->
        <copy todir="src/com/et">
            <fileset dir="src/apis/bi/com/et"
                includes="
                **/*.xml
                **/*.gif
                **/*.jpg
                **/*.png
                **/*.html
                **/*.js
                **/*.ico
                **/*.properties"
                excludes="**/*UTF16.properties"/>
        </copy>
    </target>

    <!-- ================================================================= -->
    <!-- Jar EnvisionPlugin                                                -->
    <!-- ================================================================= -->
    <!-- This plugin goes on the customer's PBX to pass contact source
    messages back and forth with the Server -->
    <target name="jar-EnvisionPlugin" description="Creates EnvisionPlugin.jar"
        depends="make-EnvisionPlugin">
        <jar jarfile="${EnvisionPluginBasedir}/EnvisionPlugin.jar"
            basedir="${EnvisionPluginBasedir}"
            duplicate="preserve"
            includes="
            com/**/*.class
            com/**/*.xml
            com/**/*.html
            com/**/*.gif
            com/**/*.png
            com/**/*.jpg
            com/**/*.ico
            com/**/*.properties"/>
    </target>

    <!-- ================================================================= -->
    <!-- jar-Envision                                                      -->
    <!-- ================================================================= -->
    <target name="jar-Envision" description="Jar Envision">
        <jar destfile="src/Envision.jar"
            basedir="src"
            duplicate="preserve"
            includes="
            com/**/*.class
            com/**/*.xml
            com/**/*.gif
            com/**/*.jpg
            com/**/*.png
            com/**/*.html
            com/**/*.js
            com/**/*.ico
            com/**/*.properties"/>
    </target>

    <!-- ================================================================= -->
    <!-- jar-license                                                       -->
    <!-- ================================================================= -->
    <target name="jar-license" description="Jar license">
        <copy file="src/server/com/et/license/LicenseManager.class"
            tofile="src/com/et/license/LicenseManager.class"/>
        <jar destfile="src/server/com/et/license/license.jar"
            basedir="src"
            duplicate="preserve"
            includes="com/**/*.class"/>
    </target>

    <!-- ================================================================= -->
    <!-- Make EnvisionPlugin                                               -->
    <!-- ================================================================= -->
    <!-- This plugin goes on the customer's PBX to pass contact source
    messages back and forth with the Server -->
    <target name="make-EnvisionPlugin" description="Compiles EnvisionPlugin">
        <property name="EnvisionPluginBasedir"
            value="workdir/ContactSourceRunner/EnvisionPlugin/"/>
        <mkdir dir="${EnvisionPluginBasedir}"/>
        <!-- TODO fork, memoryInitialSize & memoryMaximumSize need to go to
        build.properties (or, better, to runbuild.py -timc 2/5/2010 -->
        <javac srcdir="src/contactSources/nuasisPlugin/"
            destdir="${EnvisionPluginBasedir}"
            debug="${javac.debug}"
            deprecation="${javac.deprecation}"
            fork="yes"
            memoryInitialSize="100m"
            memoryMaximumSize="100m" >
            <classpath refid="project-classpath"/>
            <!-- add to the classpath: see build.xml -->
            <classpath refid="classpath-v2"/>
        </javac>
    </target>

    <!-- ================================================================= -->
    <!-- release-license                                                   -->
    <!-- ================================================================= -->
    <target name="release-license" description="Copies jar to release dir">
        <delete verbose="true" failonerror="false" file="Release/license.jar"/>
        <copy file="src/server/com/et/license/license.jar" tofile="Release/license.jar"/>
        <delete>
            <fileset dir="src/server/com/et/license" includes="**/*.class"/>
        </delete>
    </target>

    <!-- ================================================================= -->
    <!-- release-Envision                                                  -->
    <!-- ================================================================= -->
    <target name="release-Envision" description="copies jar to release dir">
        <!-- <delete verbose="true" failonerror="false" file="Release/Envision.jar"/> -->
        <delete verbose="true" failonerror="false" includeEmptyDirs="true" dir="Release"/>
        <mkdir dir="Release"/>
        <copy file="src/Envision.jar" tofile="Release/Envision.jar"/>
        <delete verbose="true">
            <fileset dir="src/com" />
        </delete>
    </target>

    <!-- ================================================================= -->
    <!-- Release EnvisionPlugin (for Nuasis only)                          -->
    <!-- ================================================================= -->
    <!-- This plugin goes on the customer's PBX to pass contact source
    messages back and forth with the Server -->
    <target name="release-EnvisionPlugin" depends="prepare">
        <property name="EnvisionPluginBasedir"
            value="workdir/ContactSourceRunner/EnvisionPlugin/"/>
        <copy file="${EnvisionPluginBasedir}/EnvisionPlugin.jar"
            tofile="${dir.nuasis-plugin}/EnvisionPlugin.jar"/>
    </target>

    <!-- ================================================================= -->
    <!-- Build loaders project                                             -->
    <!-- ================================================================= -->
    <target name="build-Loaders"
        depends="make-cstaLoader, make-ctcLoader6.0, make-ctcLoader7.0, make-hook"/>

    <!-- ================================================================= -->
    <!-- Update all version files                                          -->
    <!-- ================================================================= -->
    <!-- TODO make this target name="..." depends="..." -timc 5/7/2010 -->
    <target name="change-version" description="Update all version files">
        <antcall target="chver-CPP"/>
        <antcall target="chver-CSharp"/>
        <antcall target="chver-Java"/>
        <antcall target="chver-AVPlayer"/>
        <antcall target="chver-RecordingDownloadTool"/>
        <antcall target="chver-EnvisionControls_INF"/>
    </target>

    <!-- ================================================================= -->
    <!-- Change AVPlayer product version                                   -->
    <!-- ================================================================= -->
    <!-- example: all on one line
        "C:\Source\buildtools\branches\9.4\base\bin\Insert.exe" -x80
        -s":x3cApplicationVersion:x3e9.4.0000.0:x3c:x2fApplicationVersion:x3e"
        -r":x3cApplicationVersion:x3e9.4.0000.1:x3c:x2fApplicationVersion:x3e"
        -o AVPlayer.csproj -->
    <!-- this is Centricity web application #1 -->
    <target name="chver-AVPlayer">
        <property name="AVPlayer_csproj"
            value="src/clients/AVPlayer/AVPlayer.csproj"/>
        <exec executable="insert.exe" vmlauncher="${vmlauncher}">
            <arg line="-c80
                -s:x3cApplicationVersion:x3e${version.previous}:x3c:x2fApplicationVersion:x3e
                -r:x3cApplicationVersion:x3e${version.product}:x3c:x2fApplicationVersion:x3e
                -o ${AVPlayer_csproj}"/>
        </exec>
    </target>

    <!-- ================================================================= -->
    <!-- Change C++ product versions                                       -->
    <!-- ================================================================= -->
    <!-- TODO Consider adding description to make target public -->
    <!-- #define _PRODUCT_VERSION 9,0,0300,4 -->
    <!-- #define _PRODUCT_VER_STR "9.0.0300.4\0" -->
    <!-- #define _PRODUCT_VER_LOGIN_STR "9.0.0300.4\0" -->
    <!-- #define _PRODUCT_ABOUT "Version 9.0.0300.4\0" -->
    <target name="chver-CPP">
        <property name="version_info_h" value="src/include/version_info.h"/>
        <exec executable="insert.exe" vmlauncher="${vmlauncher}">
            <arg line="-c40
                -s:x20_PRODUCT_VERSION:x20${p_MAJOR}:x2C${p_MINOR}:x2C${p_RELEASE}:x2C${p_BUILD}
                -r:x20_PRODUCT_VERSION:x20${MAJOR}:x2C${MINOR}:x2C${RELEASE}:x2C${BUILD}
                -o ${version_info_h}"/>
        </exec>
        <exec executable="insert.exe" vmlauncher="${vmlauncher}">
            <arg line="-c40
                -s:x20_PRODUCT_VER_STR:x20:x22${p_MAJOR}.${p_MINOR}.${p_RELEASE}.${p_BUILD}
                -r:x20_PRODUCT_VER_STR:x20:x22${version.product}
                -o ${version_info_h}"/>
        </exec>
        <exec executable="insert.exe" vmlauncher="${vmlauncher}">
            <arg line="-c40
                -s:x20_PRODUCT_VER_LOGIN_STR:x20:x22${p_MAJOR}.${p_MINOR}.${p_RELEASE}.${p_BUILD}
                -r:x20_PRODUCT_VER_LOGIN_STR:x20:x22${version.product}
                -o ${version_info_h}"/>
        </exec>
        <exec executable="insert.exe" vmlauncher="${vmlauncher}">
            <arg line="-c40
                -s:x20_PRODUCT_ABOUT:x20:x22Version:x20${p_MAJOR}.${p_MINOR}.${p_RELEASE}.${p_BUILD}
                -r:x20_PRODUCT_ABOUT:x20:x22Version:x20${version.product}
                -o ${version_info_h}"/>
        </exec>
    </target>

    <!-- ================================================================= -->
    <!-- Change C# product versions                                        -->
    <!-- ================================================================= -->
    <!-- TODO Consider adding description to make target public -->
    <!-- public const string MAJOR = "9"; -->
    <!-- public const string MINOR = "0"; -->
    <!-- public const string RELEASE = "0300"; -->
    <!-- public const string BUILD = "4"; -->
    <target name="chver-CSharp">
        <property name="version_info_cs"
            value="src/server/com/et/versioninfo/VersionInfo.cs"/>
        <exec executable="insert.exe" vmlauncher="${vmlauncher}">
            <arg line="-c30
                -s:x20MAJOR:x20=:x20:x22${p_MAJOR}:x22;
                -r:x20MAJOR:x20=:x20:x22${MAJOR}:x22;
                -o ${version_info_cs}"/>
        </exec>
        <exec executable="insert.exe" vmlauncher="${vmlauncher}">
            <arg line="-c30
                -s:x20MINOR:x20=:x20:x22${p_MINOR}:x22;
                -r:x20MINOR:x20=:x20:x22${MINOR}:x22;
                -o ${version_info_cs}"/>
        </exec>
        <!-- prn20765: this is incompatible with VersionInfo.cs, and probably
        broken.  I just opened the PRN, so we'll see what comes of it.  WFM
        and BI use this file. -->
        <exec executable="insert.exe" vmlauncher="${vmlauncher}">
            <arg line="-c30
                -s:x20RELEASE:x20=:x20:x22${p_RELEASE}:x22;
                -r:x20RELEASE:x20=:x20:x22${RELEASE}:x22;
                -o ${version_info_cs}"/>
        </exec>
        <exec executable="insert.exe" vmlauncher="${vmlauncher}">
            <arg line="-c30
                -s:x20BUILD:x20=:x20:x22${p_BUILD}:x22;
                -r:x20BUILD:x20=:x20:x22${BUILD}:x22;
                -o ${version_info_cs}"/>
        </exec>

        <!-- prn18732 (in 9.0.4) hopefully temporary workaround -->
        <!-- this is removed in Charlie -timc 2/18/2011 -->
        <property name="daisy_version_cs_SERVER"
            value="src/server/com/et/wfm/daisy/DaisyVersion.cs"/>
        <!-- clients/wfm/WFMClient/com/et/daisy/DaisyVersion.cs -->
        <exec executable="insert.exe" vmlauncher="${vmlauncher}">
            <arg line="-c30
                -s:x20MAJOR:x20=:x20${p_MAJOR};
                -r:x20MAJOR:x20=:x20${MAJOR};
                -o ${daisy_version_cs_SERVER}"/>
        </exec>
        <exec executable="insert.exe" vmlauncher="${vmlauncher}">
            <arg line="-c30
                -s:x20MINOR:x20=:x20${p_MINOR};
                -r:x20MINOR:x20=:x20${MINOR};
                -o ${daisy_version_cs_SERVER}"/>
        </exec>
        <exec executable="insert.exe" vmlauncher="${vmlauncher}">
            <arg line="-c30
                -s:x20RELEASE:x20=:x20${p_RELEASE};
                -r:x20RELEASE:x20=:x20${RELEASE};
                -o ${daisy_version_cs_SERVER}"/>
        </exec>
        <exec executable="insert.exe" vmlauncher="${vmlauncher}">
            <arg line="-c30
                -s:x20BUILD:x20=:x20${p_BUILD};
                -r:x20BUILD:x20=:x20${BUILD};
                -o ${daisy_version_cs_SERVER}"/>
        </exec>

        <!-- prn18732 (in 9.0.4) hopefully temporary workaround -->
        <!-- this is removed in Charlie -timc 2/18/2011 -->
        <property name="daisy_version_cs_CLIENT"
            value="src/clients/wfm/WFMClient/com/et/daisy/DaisyVersion.cs"/>
        <exec executable="insert.exe" vmlauncher="${vmlauncher}">
            <arg line="-c30
                -s:x20MAJOR:x20=:x20${p_MAJOR};
                -r:x20MAJOR:x20=:x20${MAJOR};
                -o ${daisy_version_cs_CLIENT}"/>
        </exec>
        <exec executable="insert.exe" vmlauncher="${vmlauncher}">
            <arg line="-c30
                -s:x20MINOR:x20=:x20${p_MINOR};
                -r:x20MINOR:x20=:x20${MINOR};
                -o ${daisy_version_cs_CLIENT}"/>
        </exec>
        <exec executable="insert.exe" vmlauncher="${vmlauncher}">
            <arg line="-c30
                -s:x20RELEASE:x20=:x20${p_RELEASE};
                -r:x20RELEASE:x20=:x20${RELEASE};
                -o ${daisy_version_cs_CLIENT}"/>
        </exec>
        <exec executable="insert.exe" vmlauncher="${vmlauncher}">
            <arg line="-c30
                -s:x20BUILD:x20=:x20${p_BUILD};
                -r:x20BUILD:x20=:x20${BUILD};
                -o ${daisy_version_cs_CLIENT}"/>
        </exec>
    </target>

    <!-- ================================================================= -->
    <!-- Change EnvisionControls.inf product version                       -->
    <!-- ================================================================= -->
    <target name="chver-EnvisionControls_INF">
        <!-- FileVersion=9,0,0,504 -->
        <property name="EnvisionControls_INF"
            value="setup/Signature/EnvisionControls.inf"/>
        <exec executable="insert.exe" vmlauncher="${vmlauncher}">
            <arg line="-c80
                -sFileVersion:x3d${p_MAJOR},${p_MINOR},${p_RELEASE},${p_BUILD}
                -rFileVersion:x3d${MAJOR},${MINOR},${RELEASE},${BUILD}
                -o ${EnvisionControls_INF}"/>
        </exec>
    </target>

    <!-- ================================================================= -->
    <!-- Change Java product versions                                      -->
    <!-- ================================================================= -->
    <!-- TODO Consider adding description to make target public -->
    <!-- Note: prn18358 Only RELEASE was changed to a String -->
    <!-- public static final int MAJOR = 9; -->
    <!-- public static final int MINOR = 0; -->
    <!-- public static final String RELEASE = "0300"; -->
    <!-- public static final int BUILD = 4; -->
    <target name="chver-Java">
        <property name="ProductVersion_java" value="src/server/com/et/startup/ProductVersion.java"/>
        <exec executable="insert.exe" vmlauncher="${vmlauncher}">
            <arg line="-c30
                -s:x20MAJOR:x20=:x20${p_MAJOR};
                -r:x20MAJOR:x20=:x20${MAJOR};
                -o ${ProductVersion_java}"/>
        </exec>
        <exec executable="insert.exe" vmlauncher="${vmlauncher}">
            <arg line="-c30
                -s:x20MINOR:x20=:x20${p_MINOR};
                -r:x20MINOR:x20=:x20${MINOR};
                -o ${ProductVersion_java}"/>
        </exec>
        <exec executable="insert.exe" vmlauncher="${vmlauncher}">
            <arg line="-c30
                -s:x20RELEASE:x20=:x20:x22${p_RELEASE}:x22;
                -r:x20RELEASE:x20=:x20:x22${RELEASE}:x22;
                -o ${ProductVersion_java}"/>
        </exec>
        <exec executable="insert.exe" vmlauncher="${vmlauncher}">
            <arg line="-c30
                -s:x20BUILD:x20=:x20${p_BUILD};
                -r:x20BUILD:x20=:x20${BUILD};
                -o ${ProductVersion_java}"/>
        </exec>
    </target>

    <!-- ================================================================= -->
    <!-- Change RecordingDownloadTool product version                      -->
    <!-- ================================================================= -->
    <!-- this is Centricity web application #2 -->
    <target name="chver-RecordingDownloadTool">
        <property name="RecordingDownloadTool_csproj"
            value="src/clients/RecordingDownloadTool/RecordingDownloadTool.csproj"/>
        <exec executable="insert.exe" vmlauncher="${vmlauncher}">
            <arg line="-c80
                -s:x3cApplicationVersion:x3e${version.previous}:x3c:x2fApplicationVersion:x3e
                -r:x3cApplicationVersion:x3e${version.product}:x3c:x2fApplicationVersion:x3e
                -o ${RecordingDownloadTool_csproj}"/>
        </exec>
    </target>

    <!-- ================================================================= -->
    <!-- Commit all version and installer project files                    -->
    <!-- ================================================================= -->
    <!-- depends="change-version,setup-installers" -->
    <!-- TODO need a dependency here?  It's tricky, because at least
    setup-installers will rebuild all the installers, whether they're up to
    date or not. -->
    <target name="commit-all" description="Commit all version and installer project files">
        <svn username="buildmgr" password="buildmgr">
            <commit message="00000: Version header and installer file commit for build ${version.product}">
                <fileset
                    dir="."
                    includes="
                    src/**/*.csproj
                    src/**/*.cs
                    src/**/*.h
                    src/**/*.java
                    setup/**/*.inf
                    setup/installs/**/*.aip"/>
            </commit>
        </svn>
    </target>

    <!-- ================================================================= -->
    <!-- Commit installer project files                                    -->
    <!-- ================================================================= -->
    <!-- TODO think about adding setup/Signature (or maybe just use setup)
    here to pick up the new EnvisionControls.cab and contents.  And then
    reconsider: why would I want to commit a cab?  Regardless,
    EnvisionControls.inf DOES need to be committed, but not here.  It goes in
    up above with the version file commits.  -->
    <target name="commit-installers" depends="setup-installers">
        <svn username="buildmgr" password="buildmgr">
            <commit dir="setup/installs"
                message="00000: Installer project file checkin for build ${version.product}"/>
        </svn>
    </target>

    <!-- ================================================================= -->
    <!-- Commit project files without recompiling the installers           -->
    <!-- ================================================================= -->
    <target name="commit-installers-no-depends">
        <svn username="buildmgr" password="buildmgr">
            <commit dir="setup/installs"
                message="00000: Installer project file checkin for build ${version.product}"/>
        </svn>
    </target>

    <!-- ================================================================= -->
    <!-- Commit version files [batch version]                              -->
    <!-- ================================================================= -->
    <!-- TODO remove description to make this "private"? -->
    <target name="commit-version-files" depends="change-version"
        description="Commit all changed src files [intended to pick up only version files]">
        <svn username="buildmgr" password="buildmgr">
            <commit message="00000: Version file checkin for build ${version.product}">
                <!-- fileset needs to include the extensions of all version files -->
                <fileset dir="."
                    includes="**/*.csproj,**/*.cs,**/*.h,**/*.java,**/*.inf"/>
            </commit>
        </svn>
    </target>

    <!-- ================================================================= -->
    <!-- Create the release directory                                      -->
    <!-- ================================================================= -->
    <!-- TODO can we get rid of all of this?  -timc 1/2/2009 -->
    <!-- TODO at least *try* to build the effing thing without it -timc Cinco
    de Mayo 2010 -->
    <!-- moved to buildJars.xml -> release-Envision -timc 2/19/2011 -->
    <!--
    <target name="create-release-dir" description="Creates Release directories">
        <delete quiet="true" failonerror="false" includeEmptyDirs="true" dir="Release"/>
        <mkdir dir="Release"/>
        <mkdir dir="Release/Admin"/>
        <mkdir dir="Release/Common"/>
    </target>
    -->

    <!-- ================================================================= -->
    <!-- Delete Stubs & Skels (rebuild only)                               -->
    <!-- ================================================================= -->
    <target name="del-stubskel">
        <delete verbose="true">
            <fileset dir="." includes="**/*_Skel.* **/*_Stub.* **/*_Dist.*"/>
        </delete>
    </target>

    <!-- ================================================================= -->
    <!-- e-mail build results                                              -->
    <!-- ================================================================= -->
    <!-- The format of the echo message below looks a little odd, but it has
    to be formatted that way to get "normal" looking newlines.
    .
    In case it gets messed up, it's echo plus attributes, newline, then the
    message at column 0 on the following line, then close-echo directly
    following the end of the message. -->

    <target name="email-build-complete" depends="get-head-revision">
        <mail from="buildmgr@envisioninc.com"
            tolist="${mail.to}"
            mailhost="corpserv04.acme.envisiontelephony.com"
            subject="build results, ${version.product} (r${repository.revision})"
            encoding="plain">
            <message>
Build is here: ${dir.products.converted}\${version.product}
Log file is here: ${dir.projects.converted}\logs\build_${version.product}.xml


Compiled from source revision ${repository.revision}


===========================================================
C# Unit Tests Results

${unittest.csharpresults}


Complete log here: ${dir.projects.converted}\unittests\${version.product}_verbose.xml
===========================================================
            </message>
        </mail>
    </target>

    <!-- ================================================================= -->
    <!-- End build tasks                                                   -->
    <!-- ================================================================= -->
    <target name="end">
        <!-- TODO Check if the semaphore file already exists.  This could
        indicate trouble.  (But isn't it too late by this point?) -->
        <!-- See the 'after' method of runbuild.py for details about this. -->
        <echo file="../${version.product}_SUCCESS"/>
        <!-- See Java's SimpleDateFormat for formatting details -->
        <tstamp>
            <format property="time.end" pattern="yyyy-MM-dd',' HH:mm:ss" locale="en_US"/>
        </tstamp>
        <echo>[${env.COMPUTERNAME}] Build completed: ${time.end}</echo>
    </target>

    <!-- ================================================================= -->
    <!-- Generate database schemas                                         -->
    <!-- ================================================================= -->
    <!-- TODO Do something about this. -timc 1/2/2009 -->
    <target name="generate-dbschemas"
        description="Generates Envision database schemas">

        <!-- <echo>workdir=${dir.workdir}</echo> -->
        <exec dir="workdir" executable="cmd.exe" vmlauncher="${vmlauncher}" failonerror="true">
            <arg line="/c GenDBSchemas.bat"/>
        </exec>
    </target>

    <!-- TODO I'll need to do more work to use this as the default target.  It
    breaks the build runner. -->
    <!-- ================================================================= -->
    <!-- Help                                                              -->
    <!-- ================================================================= -->
    <target name="help" description="Tell user how to get help.">
        <echo message="Please specify at least one target"/>
        <echo message="To run a full build, use 'ant official-build'"/>
        <echo message="Type 'ant -projecthelp' for the full list of public targets"/>
    </target>

    <!-- ================================================================= -->
    <!-- Make C# and C++ files                                             -->
    <!-- ================================================================= -->
    <target name="make-CPP" depends="build-CPP, build-CSharp, build-Loaders"/>

    <!-- ================================================================= -->
    <!-- Make and release ADIT installer                                   -->
    <!-- ================================================================= -->
    <!--
    <target name="make-ADIT-installer" depends="prepare">
        <build-AI-installer
            product.name="ADIT"
            installer.path="setup/installs/ADIT"
            project.file="ADIT.aip"/>
    </target>
    <target name="release-ADIT-installer" depends="make-ADIT-installer">
        <release-AI-installer
            product.name="ADIT"
            installer.path="setup/installs/ADIT"
            product.path="${dir.utils}"/>
    </target>
    -->

    <!-- ================================================================= -->
    <!-- Make and release Administrator                                    -->
    <!-- ================================================================= -->
    <!-- For now, this is practically a clone of make-PerformanceSuite.  After
    Administrator proves itself, PerformanceSuite will go on a major diet. -->
    <target name="make-Administrator-installer"
        depends="prepare, unzip-BI_WebHelp, unzip-Envision_JRE, unzip-PerformanceSuite-jars_ZIP">
        <build-AI-installer
            product.name="Administrator"
            installer.path="setup/installs/Administrator"
            project.file="Administrator.aip"/>
    </target>
    <target name="release-Administrator-installer" depends="make-Administrator-installer">
        <release-AI-installer
            product.name="Administrator"
            installer.path="setup/installs/Administrator"
            product.path="${target1}"/>
    </target>

    <!-- ================================================================= -->
    <!-- Make and release AgentSupport installer                           -->
    <!-- ================================================================= -->
    <target name="make-AgentSupport-installer" depends="prepare">
        <build-AI-installer
            product.name="AgentSupport"
            installer.path="setup/installs/AgentSupport"
            project.file="AgentSupport.aip"/>
    </target>
    <target name="release-AgentSupport-installer" depends="make-AgentSupport-installer">
        <release-AI-installer
            product.name="AgentSupport"
            installer.path="setup/installs/AgentSupport"
            product.path="${target1}"/>
    </target>

    <!-- ================================================================= -->
    <!-- Make and release AGMS installer                                   -->
    <!-- ================================================================= -->
    <!--
    <target name="make-AGMS-installer" depends="prepare">
        <build-AI-installer
            product.name="AGMS"
            installer.path="setup/installs/AGMS"
            project.file="AGMS.aip"/>
    </target>
    <target name="release-AGMS-installer" depends="make-AGMS-installer">
        <release-AI-installer
            product.name="AGMS"
            installer.path="setup/installs/AGMS"
            product.path="${dir.utils}"/>
    </target>
    -->

    <!-- ================================================================= -->
    <!-- Make and release Analytics installer                              -->
    <!-- ================================================================= -->
    <target name="make-Analytics-installer" depends="prepare">
        <build-AI-installer
            product.name="Analytics"
            installer.path="setup/installs/Analytics"
            project.file="Analytics.aip"/>
    </target>
    <target name="release-Analytics-installer" depends="make-Analytics-installer">
        <release-AI-installer
            product.name="Analytics"
            installer.path="setup/installs/Analytics"
            product.path="${target2}"/>
    </target>

    <!-- ================================================================= -->
    <!-- Make and release CentricityQM installer                           -->
    <!-- ================================================================= -->
    <target name="make-CentricityQM-installer">
        <build-AI-installer
            product.name="CentricityQM"
            installer.path="setup/installs/CentricityQM"
            project.file="CentricityQM.aip"/>
    </target>
    <target name="release-CentricityQM-installer" depends="make-CentricityQM-installer">
        <release-AI-installer
            product.name="CentricityQM"
            installer.path="setup/installs/CentricityQM"
            product.path="${dir.utils}"/>
    </target>

    <!-- ================================================================= -->
    <!-- Make and release CentricityWebApplications installer              -->
    <!-- ================================================================= -->
    <target name="make-CentricityWebApplications-installer">
        <build-AI-installer
            product.name="CentricityWebApplications"
            installer.path="setup/installs/CentricityWebApplications"
            project.file="CentricityWebApplications.aip"/>
    </target>
    <target name="release-CentricityWebApplications-installer"
        depends="make-CentricityWebApplications-installer">
        <release-AI-installer
            product.name="CentricityWebApplications"
            installer.path="setup/installs/CentricityWebApplications"
            product.path="${target2}"/>
    </target>

    <!-- ================================================================= -->
    <!-- Make and release ChannelManager                                   -->
    <!-- ================================================================= -->
    <target name="make-ChannelManager-installer" depends="prepare">
        <build-AI-installer
            product.name="ChannelManager"
            installer.path="setup/installs/ChannelManager"
            project.file="ChannelManager.aip"/>
    </target>
    <target name="release-ChannelManager" depends="make-ChannelManager-installer">
        <release-AI-installer
            product.name="ChannelManager"
            installer.path="setup/installs/ChannelManager"
            product.path="${target2}"/>
    </target>

    <!-- ================================================================= -->
    <!-- Make and release DADI installer                                   -->
    <!-- ================================================================= -->
    <!--
    <target name="make-DADI-installer" depends="prepare">
        <build-AI-installer
            product.name="DADI"
            installer.path="setup/installs/DADI"
            project.file="DADI.aip"/>
    </target>
    <target name="release-DADI-installer" depends="make-DADI-installer">
        <release-AI-installer
            product.name="DADI"
            installer.path="setup/installs/DADI"
            product.path="${dir.utils}"/>
    </target>
    -->

    <!-- ================================================================= -->
    <!-- Make DBMigration installer                                        -->
    <!-- ================================================================= -->
    <!--
    <target name="make-DBMigration-installer" depends="prepare">
        <build-AI-installer
            product.name="DBMigration"
            installer.path="setup/installs/DBMigration"
            project.file="DBMigration.aip"/>
    </target>
    <target name="release-DBMigration-installer" depends="make-DBMigration-installer">
        <release-AI-installer
            product.name="DBMigration"
            installer.path="setup/installs/DBMigration"
            product.path="${dir.utils}"/>
    </target>
    -->

    <!-- ================================================================= -->
    <!-- Make EvaluationConsistencyCheck (ECC) installer                   -->
    <!-- ================================================================= -->
    <!--
    <target name="make-ECC-installer" depends="prepare">
        <build-AI-installer
            product.name="EvaluationConsistencyCheck"
            installer.path="setup/installs/EvaluationConsistencyCheck"
            project.file="EvaluationConsistencyCheck.aip"/>
    </target>
    <target name="release-ECC-installer" depends="make-ECC-installer">
        <release-AI-installer
            product.name="EvaluationConsistencyCheck"
            installer.path="setup/installs/EvaluationConsistencyCheck"
            product.path="${dir.utils}"/>
    -->
        <!-- additional copy operation for this installer only -->
        <!-- <copy todir="${dir.utils}/EvaluationConsistencyCheck/QM"> -->
    <!--
        <copy todir="${dir.utils}/EPS8.4_QMPublishedTemplateEditor">
            <fileset dir="setup/installs/EvaluationConsistencyCheck/QM"/>
        </copy>
    </target>
    -->

    <!-- ================================================================= -->
    <!--  Make Envision CAB files (EN, DE, ES)                             -->
    <!-- ================================================================= -->
    <target name="make-EnvisionControls_CAB">
        <antcall target="make-EnvisionControls_CAB_EN"/>
        <antcall target="make-EnvisionControls_CAB_DE"/>
        <antcall target="make-EnvisionControls_CAB_ES"/>
    </target>

    <!-- English -->
    <target name="make-EnvisionControls_CAB_EN"
        description="Makes EnvisionControls.cab (English) using CabArc">
        <property name="dir.toCab_EN" value="setup/Signature/EN/toCab"/>

        <copy file="setup/Signature/EnvisionControls.inf"
            tofile="${dir.toCab_EN}/EnvisionControls.inf"/>
        <copy file="${dir.sdk}/ISource/_ISource.dll"
            tofile="${dir.toCab_EN}/_ISource.dll"/>
        <copy file="${dir.sdk}/MS/mfc80.dll"
            tofile="${dir.toCab_EN}/mfc80.dll"/>

        <!-- specific to this CAB -->
        <copy file="workdir/Quality/AgentX.ocx"
            tofile="${dir.toCab_EN}/AgentX.ocx"/>
        <copy file="src/clients/reporting/C2CReportingControls/Release/C2CReportingControls.ocx"
            tofile="${dir.toCab_EN}/C2CReportingControls.ocx"/>
        <copy file="workdir/agentdesktop/WebControls.ocx"
            tofile="${dir.toCab_EN}/WebControls.ocx"/>
        <copy file="workdir/quality/SharedResources.dll"
            tofile="${dir.toCab_EN}/SharedResources.dll"/>

        <cab cabfile="setup/Signature/EN/EnvisionControls.cab"
            basedir="${dir.toCab_EN}"
            options="-s 6144"
            includes="AgentX.ocx, C2CReportingControls.ocx, WebControls.ocx,
            EnvisionControls.inf, _ISource.dll, mfc80.dll, SharedResources.dll"
            verbose="yes"/>
    </target>

    <!-- German -->
    <target name="make-EnvisionControls_CAB_DE"
        description="Makes EnvisionControls.cab (German) using CabArc">
        <property name="dir.toCab_DE" value="setup/Signature/DE/toCab"/>

        <copy file="setup/Signature/EnvisionControls.inf"
            tofile="${dir.toCab_DE}/EnvisionControls.inf"/>
        <copy file="${dir.sdk}/ISource/_ISource.dll"
            tofile="${dir.toCab_DE}/_ISource.dll"/>
        <copy file="${dir.sdk}/MS/mfc80.dll"
            tofile="${dir.toCab_DE}/mfc80.dll"/>

        <!-- specific to this CAB -->
        <copy file="src/clients/Quality/agentdesktop/ReleaseGerman/AgentX.ocx"
            tofile="${dir.toCab_DE}/AgentX.ocx"/>
        <copy file="src/clients/reporting/C2CReportingControls/ReleaseGerman/C2CReportingControls.ocx"
            tofile="${dir.toCab_DE}/C2CReportingControls.ocx"/>
        <copy file="src/clients/reporting/controls/ReleaseGerman/WebControls.ocx"
            tofile="${dir.toCab_DE}/WebControls.ocx"/>
        <copy file="src/clients/quality/sharedresources/ReleaseGerman/SharedResources.dll"
            tofile="${dir.toCab_DE}/SharedResources.dll"/>

        <cab cabfile="setup/Signature/DE/EnvisionControls.cab"
            basedir="${dir.toCab_DE}"
            options="-s 6144"
            includes="AgentX.ocx, C2CReportingControls.ocx, WebControls.ocx,
            EnvisionControls.inf, _ISource.dll, mfc80.dll, SharedResources.dll"
            verbose="yes"/>
    </target>

    <!-- Spanish -->
    <target name="make-EnvisionControls_CAB_ES"
        description="Makes EnvisionControls.cab (Spanish) using CabArc">
        <property name="dir.toCab_ES" value="setup/Signature/ES/toCab"/>

        <copy file="setup/Signature/EnvisionControls.inf"
            tofile="${dir.toCab_ES}/EnvisionControls.inf"/>
        <copy file="${dir.sdk}/ISource/_ISource.dll"
            tofile="${dir.toCab_ES}/_ISource.dll"/>
        <copy file="${dir.sdk}/MS/mfc80.dll"
            tofile="${dir.toCab_ES}/mfc80.dll"/>

        <!-- specific to this CAB -->
        <copy file="src/clients/Quality/agentdesktop/ReleaseSpanish/AgentX.ocx"
            tofile="${dir.toCab_ES}/AgentX.ocx"/>
        <copy file="src/clients/reporting/C2CReportingControls/ReleaseSpanish/C2CReportingControls.ocx"
            tofile="${dir.toCab_ES}/C2CReportingControls.ocx"/>
        <copy file="src/clients/reporting/controls/ReleaseSpanish/WebControls.ocx"
            tofile="${dir.toCab_ES}/WebControls.ocx"/>
        <copy file="src/clients/quality/sharedresources/ReleaseSpanish/SharedResources.dll"
            tofile="${dir.toCab_ES}/SharedResources.dll"/>

        <cab cabfile="setup/Signature/ES/EnvisionControls.cab"
            basedir="${dir.toCab_ES}"
            options="-s 6144"
            includes="AgentX.ocx, C2CReportingControls.ocx, WebControls.ocx,
            EnvisionControls.inf, _ISource.dll, mfc80.dll, SharedResources.dll"
            verbose="yes"/>
    </target>

    <!-- ================================================================= -->
    <!-- Make PerformanceSuite installer                                   -->
    <!-- ================================================================= -->
    <target name="make-PerformanceSuite-installer"
        depends="prepare, unzip-BI_WebHelp, unzip-Envision_JRE, unzip-PerformanceSuite-jars_ZIP">
        <build-AI-installer
            product.name="PerformanceSuite"
            installer.path="setup/installs/PerformanceSuite"
            project.file="PerformanceSuite.aip"/>
    </target>
    <target name="release-PerformanceSuite-installer" depends="make-PerformanceSuite-installer">
        <release-AI-installer
            product.name="PerformanceSuite"
            installer.path="setup/installs/PerformanceSuite"
            product.path="${target1}"/>
    </target>

    <!-- ================================================================= -->
    <!-- Make and release ServerSuite                                      -->
    <!-- ================================================================= -->
    <target name="make-ServerSuite-installer"
        depends="prepare, unzip-WebHelp, unzip-Envision_JRE, unzip-Server-jars_ZIP">
        <build-AI-installer
            product.name="ServerSuite"
            installer.path="setup/installs/ServerSuite"
            project.file="ServerSuite.aip"/>
    </target>
    <target name="release-ServerSuite-installer" depends="make-ServerSuite-installer">
        <release-AI-installer
            product.name="ServerSuite"
            installer.path="setup/installs/ServerSuite"
            product.path="${target2}"/>
    </target>

    <!-- ================================================================= -->
    <!-- Make ServiceMonitor                                               -->
    <!-- ================================================================= -->
    <target name="make-ServiceMonitor" description="Compiles ServiceMonitor using MSBuild">
        <exec executable="${compiler.msbuild}" vmlauncher="${vmlauncher}" failonerror="true">
            <arg line="/target:Build src/tools/EnvisionServiceMonitor/EnvisionServiceMonitor.sln /property:Configuration=Release /l:FileLogger,Microsoft.Build.Engine;logfile=BuildLog.txt;append=true"/>
        </exec>
    </target>

    <!-- ================================================================= -->
    <!-- Make and release SpeechProcessingClient installer                 -->
    <!-- ================================================================= -->
    <target name="make-SpeechProcessingClient-installer" depends="prepare,unzip-NuanceProfile">
        <build-AI-installer
            product.name="SpeechProcessingClient"
            installer.path="setup/installs/SpeechProcessingClient"
            project.file="SpeechProcessingClient.aip"/>
    </target>
    <target name="release-SpeechProcessingClient-installer"
        depends="make-SpeechProcessingClient-installer">
        <release-AI-installer
            product.name="SpeechProcessingClient"
            installer.path="setup/installs/SpeechProcessingClient"
            product.path="${target2}"/>
    </target>

    <!-- ================================================================= -->
    <!-- Make and release SpeechServerService installer                    -->
    <!-- ================================================================= -->
    <target name="make-SpeechServerService-installer" depends="prepare">
        <build-AI-installer
            product.name="SpeechServerService"
            installer.path="setup/installs/SpeechServerService"
            project.file="SpeechServerService.aip"/>
    </target>
    <target name="release-SpeechServerService-installer"
        depends="make-SpeechServerService-installer">
        <release-AI-installer
            product.name="SpeechServerService"
            installer.path="setup/installs/SpeechServerService"
            product.path="${target2}"/>
    </target>

    <!-- ================================================================= -->
    <!-- Make and release Tools                                             -->
    <!-- ================================================================= -->
    <target name="make-Tools-installer" depends="prepare">
        <build-AI-installer
            product.name="Tools"
            installer.path="setup/installs/Tools"
            project.file="Tools.aip"/>
    </target>
    <target name="release-Tools-installer" depends="make-Tools-installer">
        <release-AI-installer
            product.name="Tools"
            installer.path="setup/installs/Tools"
            product.path="${dir.utils}"/>
    </target>

    <!-- ================================================================= -->
    <!-- Make and release WMWrapperService installer                       -->
    <!-- ================================================================= -->
    <target name="make-WMWrapperService-installer" depends="prepare">
        <build-AI-installer
            product.name="WMWrapperService"
            installer.path="setup/installs/WMWrapperService"
            project.file="WMWrapperService.aip"/>
    </target>
    <target name="release-WMWrapperService-installer" depends="make-WMWrapperService-installer">
        <release-AI-installer
            product.name="WMWrapperService"
            installer.path="setup/installs/WMWrapperService"
            product.path="${target2}"/>
    </target>

    <!-- ================================================================= -->
    <!-- Prepare the release share for the installers                      -->
    <!-- ================================================================= -->
    <!-- This is an official-build target.  It should not be used for
    rebuilds. -timc 2/17/2011 -->
    <target name="prepare" description="Prepare the release share for the installers">
        <mkdir dir="${dir.products}/${version.product}"/>
        <!-- assign these properties sooner so they can be used by the
        sub-targets (release-ADIT, release-DADI, etc.) as well as by
        release-installers -->
        <property name="target1" value="${dir.products}/${version.product}/CD1"/>
        <property name="target2" value="${dir.products}/${version.product}/CD2"/>
        <property name="target3" value="${dir.products}/${version.product}/CD3"/>
        <property name="target4" value="${dir.products}/${version.product}/CD4"/>
        <property name="dir.retired" value="${target2}/Retired"/>
        <property name="dir.utils" value="${target2}/utils"/>
        <property name="dir.nuasis-plugin" value="${target2}/utils/Nuasis"/>
    </target>

    <!-- ================================================================= -->
    <!-- Build C# unit test projects                                       -->
    <!-- ================================================================= -->
    <target name="build-CSUnitTests" description="Build the C# unit test projects">
        <build-cpp solution.file="src/tests/DotNetUnitTests/DotNetUnitTests.sln"/>
    </target>

    <!-- ================================================================= -->
    <!-- Run C# unit tests                                                 -->
    <!-- ================================================================= -->
    <target name="run-CSUnitTests" depends="build-CSUnitTests" description="Run the C# unit tests">
        <!-- Replace the connection string to point to the unit test database -->
        <loadfile srcfile="src/tests/DotNetUnitTests/UT_Release.config" property="unittest.updatedconfig">
            <filterchain>
                <replacetokens begintoken="D" endtoken=";">
                    <token key="ata Source=localhost" value="Data Source=${unittest.sqlserver};"/>
                </replacetokens>
                <replacetokens begintoken="I" endtoken=";">
                    <token key="nitial Catalog=EPS9_Common" value="Initial Catalog=${unittest.sqldb};"/>
                </replacetokens>
            </filterchain>
        </loadfile>
        <echo file="src/tests/DotNetUnitTests/UT_Release.config" message="${unittest.updatedconfig}"/>
        <!-- Delete whatever previous results that may exist -->
        <delete file="src/tests/DotNetUnitTests/UT_BLL/bin/Release/results_summary.txt"/>
        <delete file="src/tests/DotNetUnitTests/UT_BLL/bin/Release/results_verbose.xml"/>
        <!-- Run the unit tests -->
        <exec executable="${unittest.nunit.bin}/nunit-console.exe" vmlauncher="${vmlauncher}" failonerror="false">
            <arg line="src/tests/DotNetUnitTests/UT_Release.nunit
                /xml:src\tests\DotNetUnitTests\UT_BLL\bin\Release\results_verbose.xml"/>
            <redirector output="src\tests\DotNetUnitTests\UT_BLL\bin\Release\results_summary.txt" alwayslog="true"/>
        </exec>
    </target>

    <!-- ================================================================= -->
    <!-- Publish C# unit test results                                      -->
    <!-- ================================================================= -->
    <target name="publish-CSUnitTests" depends="run-CSUnitTests"
        description="Publish the results of the C# unit tests">
        <!-- Copy the summary and verbose results to the projects folder -->
        <copy file="src/tests/DotNetUnitTests/UT_BLL/bin/Release/results_summary.txt"
            tofile="${dir.projects.converted}/unittests/${version.product}_summary.txt"/>
        <copy file="src/tests/DotNetUnitTests/UT_BLL/bin/Release/results_verbose.xml"
            tofile="${dir.projects.converted}/unittests/${version.product}_verbose.xml"/>
    </target>

    <!-- ================================================================= -->
    <!-- build, run, and publish the unit test results                     -->
    <!-- ================================================================= -->
    <!-- <target name="publish-unit-test-results" depends="propset" -->
    <target name="publish-unit-test-results"
        description="Publishes the results of the unit tests">
        <!-- publish the results for the c# unit tests -->
        <antcall target="publish-CSUnitTests"/>

        <!-- this is where JUnit test results can be published -->

        <!-- load the results summary into a property -->
        <loadfile property="unittest.csharpresults"
            srcFile="${dir.projects.converted}\unittests\${version.product}_summary.txt"/>
    </target>

    <!-- ================================================================= -->
    <!-- Release Documentation, CD1 & CD2                                  -->
    <!-- ================================================================= -->
    <target name="release-Documentation-CD1" depends="prepare">
        <!-- full documentation to target1 -->
        <copy todir="${target1}/Documentation">
            <fileset dir="Documentation/QuickReference">
                <!-- TODO Can I get rid of this?  It's pointless. -->
                <include name="QRS - CentricityAgentDesktop.pdf"/>
            </fileset>
        </copy>
        <copy todir="${target1}/Documentation/UserGuides">
            <fileset dir="Documentation/UserGuides">
                <exclude name="Install_Upgrade.pdf"/>
            </fileset>
        </copy>
        <copy file="Documentation/ReleaseNotes/ReleaseNotes.pdf"
            tofile="${target1}/Documentation/ReleaseNotes.pdf"/>
        <copy file="Documentation/AdbeRdr70_enu.exe"
            tofile="${target1}/Documentation/AdbeRdr70_enu.exe"/>
    </target>
    <target name="release-Documentation-CD2" depends="prepare">
        <!-- release notes only to target2 -->
        <copy file="Documentation/ReleaseNotes/ReleaseNotes.pdf"
            tofile="${target2}/Documentation/ReleaseNotes.pdf"/>
        <copy file="Documentation/AdbeRdr70_enu.exe"
            tofile="${target2}/Documentation/AdbeRdr70_enu.exe"/>
    </target>

    <!-- ================================================================= -->
    <!-- Release CD3                                                       -->
    <!-- ================================================================= -->
    <target name="release-CD3" depends="prepare">
        <copy todir="${target3}">
            <fileset dir="${uncpath.cd3_sources}"/>
        </copy>
        <property name="dir.svcmon"
            value="src/tools/EnvisionServiceMonitor/EnvisionServiceMonitor/bin/Release"/>
        <copy file="${dir.svcmon}/EnvisionServiceMonitor.exe" todir="${target3}/tools"/>
        <copy file="${dir.svcmon}/EnvisionServiceMonitor.exe.config" todir="${target3}/tools"/>
    </target>

    <!-- ================================================================= -->
    <!-- Release CD4                                                       -->
    <!-- ================================================================= -->
    <target name="release-CD4" depends="prepare">
        <copy todir="${target4}">
            <fileset dir="${uncpath.cd4_sources}"/>
        </copy>
    </target>

    <!-- ================================================================= -->
    <!-- Target for running unit tests                                     -->
    <!-- ================================================================= -->
    <!-- build and run the unit tests -->
    <target name="run-unit-tests"
        description="Builds and runs unit tests">
        <!-- build and run C# unit tests -->
        <ant antfile="unitTests.xml" dir="." target="run-CSUnitTests"/>

        <!-- this is where JUnit tests can go -->
    </target>

    <!-- =========================================================== -->
    <!-- Run the installer software and release the installers       -->
    <!-- =========================================================== -->
    <!-- TODO call release-installers directly -timc, Cinco de Mayo 2010 -->
    <target name="setup-installers"
        description="Create and deploy the installers">
        <!-- <ant antfile="buildSetup.xml" dir="."
            target="release-installers"/> -->
        <antcall target="release-installers"/>
    </target>

    <!-- ================================================================= -->
    <!--  Sign Envision CAB files                                          -->
    <!-- ================================================================= -->
    <!-- TODO VIPER -timc 9/20/2010 -->
    <!-- <target name="sign-EnvisionControls_CAB" depends="propset"> -->
    <target name="sign-EnvisionControls_CAB">
        <antcall target="sign-EnvisionControls_CAB_EN"/>
        <antcall target="sign-EnvisionControls_CAB_DE"/>
        <antcall target="sign-EnvisionControls_CAB_ES"/>
    </target>

    <!-- English -->
    <target name="sign-EnvisionControls_CAB_EN" depends="make-EnvisionControls_CAB_EN"
        description="Signs EnvisionControls.cab (English) using signtool">
        <exec executable="signtool.exe"
            vmlauncher="${vmlauncher}" failonerror="true">
            <arg line="sign /a
                /f ${cert.envision}
                /p ${signtool.password}
                /t ${signtool.timestampurl}
                setup/Signature/EN/EnvisionControls.cab"/>
        </exec>
    </target>
    <!-- German -->
    <target name="sign-EnvisionControls_CAB_DE" depends="make-EnvisionControls_CAB_DE"
        description="Signs EnvisionControls.cab (German) using signtool">
        <exec executable="signtool.exe"
            vmlauncher="${vmlauncher}" failonerror="true">
            <arg line="sign /a
                /f ${cert.envision}
                /p ${signtool.password}
                /t ${signtool.timestampurl}
                setup/Signature/DE/EnvisionControls.cab"/>
        </exec>
    </target>
    <!-- Spanish -->
    <target name="sign-EnvisionControls_CAB_ES" depends="make-EnvisionControls_CAB_ES"
        description="Signs EnvisionControls.cab (Spanish) using signtool">
        <exec executable="signtool.exe"
            vmlauncher="${vmlauncher}" failonerror="true">
            <arg line="sign /a
                /f ${cert.envision}
                /p ${signtool.password}
                /t ${signtool.timestampurl}
                setup/Signature/ES/EnvisionControls.cab"/>
        </exec>
    </target>

    <!-- ================================================================= -->
    <!-- Tag the latest build                                              -->
    <!-- ================================================================= -->
    <!-- Note 1: This target tags the source revision that was originally
    fetched from SVN, and does NOT include the latest version header and
    project file commits by default.  I've decided to be conservative and use
    the checkout revision for build notifications and for the tag.  This
    avoids the potential problem of other commits in the interim, although the
    version headers and the project files are not up to date - too bad I
    guess. -->
    <!-- Note 2: Be sure to use URLs for source and destination.  Tagging with
    a URL source and WC destination took 16 minutes, but tagging with URLs for
    source and destination took 3 seconds. -->
    <!-- Note 3: THIS TARGET FAILS if the parent directories are not already
    present.  svnant does not provide a way to get at the 'parents' option, so
    beware. -->
    <target name="tag-build" depends="get-head-revision"
        description="Tag nightly build with version header and project file commits">
        <tstamp>
            <format property="datestamp" pattern="yyMMdd" locale="en_US"/>
        </tstamp>
        <property name="url.tag"
            value="${url.tags}/${datestamp}-${version.product}-r${repository.revision}"/>
        <echo message="tag-build: ${url.tag}"/>
        <trycatch>
            <try>
                <svn username="buildmgr" password="buildmgr">
                    <mkdir
                        message="00000: Creating tags dir for ${MAJOR}.${MINOR}.${RELEASE} builds"
                        url="${url.tags}"/>
                </svn>
            </try>

            <!-- Catch and release.  This is here to prevent the build from
            failing if svn mkdir fails, which is expected a lot of the time. -->
            <catch/>

            <finally>
                <svn username="buildmgr" password="buildmgr">
                    <copy message="00000: Creating tag for build ${version.product}"
                        srcUrl="${url.src}" destUrl="${url.tag}"
                        revision="${repository.revision}"/>
                </svn>
            </finally>
        </trycatch>
    </target>

    <!-- ================================================================= -->
    <!-- Touch source files                                                -->
    <!-- ================================================================= -->
    <target name="touch-build">
        <touch>
            <fileset dir="."/>
        </touch>
    </target>

    <!-- ================================================================= -->
    <!-- Unzip Agent_Desktop_Webhelp.zip for the Server installer          -->
    <!-- ================================================================= -->
    <target name="unzip-AgentDesktop_WebHelp">
        <unjar src="Documentation/WebHelp/EN/Agent_Desktop_Webhelp.zip"
            dest="Documentation/WebHelp/EN/Agent_Desktop_Webhelp"/>
        <unjar src="Documentation/WebHelp/DE/Agent_Desktop_Webhelp.zip"
            dest="Documentation/WebHelp/DE/Agent_Desktop_Webhelp"/>
        <unjar src="Documentation/WebHelp/ES/Agent_Desktop_Webhelp.zip"
            dest="Documentation/WebHelp/ES/Agent_Desktop_Webhelp"/>
    </target>

    <!-- ================================================================= -->
    <!-- Unzip BI WebHelp for the Server installer                         -->
    <!-- ================================================================= -->
    <!-- BI is not localized -->
    <target name="unzip-BI_WebHelp">
        <unjar src="Documentation/WebHelp/EN/BI_Webhelp.zip"
            dest="Documentation/WebHelp/EN/BI_Webhelp"/>
    </target>

    <!-- ================================================================= -->
    <!-- Unzip Centricity WebHelp for the Server installer                 -->
    <!-- ================================================================= -->
    <!-- TODO VIPER -timc 9/20/2010 -->
    <target name="unzip-Centricity_WebHelp">
        <!-- Maybe later this will become three separate tasks. -->
        <!-- Centricity documentation for Supervisors -->
        <unjar src="Documentation/WebHelp/EN/Centricity_Webhelp.zip"
            dest="Documentation/WebHelp/EN/Centricity_Webhelp"/>
        <unjar src="Documentation/WebHelp/DE/Centricity_Webhelp.zip"
            dest="Documentation/WebHelp/DE/Centricity_Webhelp"/>
        <unjar src="Documentation/WebHelp/ES/Centricity_Webhelp.zip"
            dest="Documentation/WebHelp/ES/Centricity_Webhelp"/>
        <unjar src="Documentation/WebHelp/EN/Agent_Desktop_Centricity_Webhelp.zip"
            dest="Documentation/WebHelp/EN/Agent_Desktop_Centricity_Webhelp"/>

        <!-- localized documentation is currently in 9.10 SP2 only -->
        <!--
        <unjar src="Documentation/WebHelp/DE/Agent_Desktop_Centricity_Webhelp.zip"
            dest="Documentation/WebHelp/DE/Agent_Desktop_Centricity_Webhelp"/>
        <unjar src="Documentation/WebHelp/ES/Agent_Desktop_Centricity_Webhelp.zip"
            dest="Documentation/WebHelp/ES/Agent_Desktop_Centricity_Webhelp"/>
        -->
    </target>

    <!-- ================================================================= -->
    <!-- Unzip Classic reporting WebHelp for the Server installer          -->
    <!-- ================================================================= -->
    <target name="unzip-ClassicReports_WebHelp">
        <unjar src="Documentation/WebHelp/EN/Classic_reports_Webhelp.zip"
            dest="Documentation/WebHelp/EN/Classic_reports_Webhelp"/>
        <unjar src="Documentation/WebHelp/DE/Classic_reports_Webhelp.zip"
            dest="Documentation/WebHelp/DE/Classic_reports_Webhelp"/>
        <unjar src="Documentation/WebHelp/ES/Classic_reports_Webhelp.zip"
            dest="Documentation/WebHelp/ES/Classic_reports_Webhelp"/>
    </target>

    <!-- ================================================================= -->
    <!-- Unzip the "Envision" JRE into the working copy                    -->
    <!-- ================================================================= -->
    <!-- In case you're wondering: this is a repackage of the private JRE from
    jdk-6u14-windows-i586.exe.  As far as I know, we cannot use the public
    JRE, because it's missing bin\client\jvm.dll or bin\server\jvm.dll (I
    forget exactly which, but it's something like that.
    .
    TODO common-buildtools needs to include a version check going forward from
    July09 (9.10).  It should include the JRE and the zipped up JAR files for
    Server and PerformanceSuite.
    .
    PKI09 (9.9) -> 1.6.0_03
    July09 (9.10) -> 1.6.0_14 -->
    <!-- <target name="unzip-Envision_JRE" depends="propset"> -->
    <target name="unzip-Envision_JRE">
        <property name="Envision_JRE" value="jre1.6.0_14-Envision-no-jars.zip"/>
        <unjar src="${dir.jre}/${Envision_JRE}"
            dest="${dir.sdk}/java"/>
    </target>

    <!-- ================================================================= -->
    <!-- Unzip the default Nuance profile for the Speech Server            -->
    <!-- ================================================================= -->
    <!-- TODO VIPER -timc 9/20/2010 -->
    <target name="unzip-NuanceProfile">
        <unjar src="${dir.sdk}/Nuance/Envision.zip" dest="workdir/AudioMining"/>
        <unjar src="${dir.sdk}/Nuance/EnvisionEnglishUK.zip" dest="workdir/AudioMining"/>
        <unjar src="${dir.sdk}/Nuance/EnvisionGerman.zip" dest="workdir/AudioMining"/>
        <exec executable="7za.exe" vmlauncher="${vmlauncher}" failonerror="false">
            <arg line="x ${dir.sdk}/Nuance/EnvisionSpanish.zip -oworkdir/AudioMining"/>
        </exec>
        <exec executable="7za.exe" vmlauncher="${vmlauncher}" failonerror="false">
            <arg line="x ${dir.sdk}/Nuance/EnvisionSpanishLA.zip -oworkdir/AudioMining"/>
        </exec>
    </target>

    <!-- ================================================================= -->
    <!-- Unzip the PerformanceSuite JARs into the working copy             -->
    <!-- ================================================================= -->
    <!-- I decided to keep the JAR files out of the JRE at the level of the
    working copy.  They will be added in by the installer, but this keeps
    things from getting messy.  And it removes an artificial dependency, since
    unzip-Server-jars_ZIP would otherwise depend on unzip-Envision_JRE.
    (make-PerformanceSuite depends on both of them.) -->
    <!-- TODO this needs to be updated.  At least ActiveMQ is out of date,
    possibly others as well. -timc, Cinco de Mayo 2010 -->
    <target name="unzip-PerformanceSuite-jars_ZIP">
        <property name="EPS-jars_ZIP" value="jar-files-EnvisionPerformanceSuite-9.10.zip"/>
        <unjar src="${dir.jre}/${EPS-jars_ZIP}"
            dest="${dir.sdk}/java"/>
    </target>

    <!-- ================================================================= -->
    <!-- Unzip the Server JARs into the working copy                       -->
    <!-- ================================================================= -->
    <!-- I decided to keep the JAR files out of the JRE at the level of the
    working copy.  They will be added in by the installer, but this keeps
    things from getting messy.  And it removes an artificial dependency, since
    unzip-Server-jars_ZIP would otherwise depend on unzip-Envision_JRE.
    (make-Server depends on both of them.) -->
    <target name="unzip-Server-jars_ZIP">
        <property name="Server-jars_ZIP" value="jar-files-EnvisionServer-9.10SP3.zip"/>
        <unjar src="${dir.jre}/${Server-jars_ZIP}"
            dest="${dir.sdk}/java"/>
    </target>

    <!-- ================================================================= -->
    <!-- Unzip WebHelp for the Server installer                            -->
    <!-- ================================================================= -->
    <target name="unzip-WebHelp"
        depends="unzip-AgentDesktop_WebHelp, unzip-BI_WebHelp,
        unzip-Centricity_WebHelp, unzip-ClassicReports_WebHelp"/>

    <!-- ================================================================= -->
    <!-- Run BVT test (build verification test test?) automation           -->
    <!-- ================================================================= -->
    <target name="run-test-automation">
        <exec dir="${dir.bin}" executable="VMWareTests.exe" failonerror="false">
            <arg line="-commonDB PE6850_Common -localDB PE6850_Local -aspNETDB PE6850_ASPNET -hostIP 10.1.6.10 -imageIP 10.1.6.106 -serverName WIN2008-64C -site_retries 15 -emailto keith.myers@envisioninc.com"/>
        </exec>
    </target>

    <!-- ================================================================= -->
    <!-- Compile the BVTs                                                  -->
    <!-- ================================================================= -->
    <!--
    <target name="make-BVTs">
        <property name="compiler.cpp" value="${vs100_devenv}"/>
        <build-cpp solution.file="src/tools/testapps/AgentCentricity/AgentCentricity.sln"/>
        <build-cpp solution.file="src/tools/testapps/CentricityBVT/autotest.sln"/>
        <build-cpp solution.file="src/tools/testapps/ReviewAdvocate/ReviewAdvocate.sln"/>
    </target>
    -->

    <target name="make-BVTs">
        <echo message="dir.projects.converted: ${dir.projects.converted}"/>
        <!-- delete the contents first, directory second -->
        <delete failonerror="False">
            <fileset dir="${dir.projects.converted}\BVTs" erroronmissingdir="False"/>
        </delete>
        <delete failonerror="False" dir="${dir.projects.converted}\BVTs"/>
        <antcall target="make-BVT-AgentCentricity"/>
        <antcall target="make-BVT-CentricityBVT"/>
        <antcall target="make-BVT-ReviewAdvocate"/>
    </target>

    <!-- NOTE have to set vs100_devenv here instead of compiler.cpp, since the
    properties are immutable. -timc 2/9/2011 -->
    <target name="make-BVT-AgentCentricity">
        <exec executable="${vs100_devenv}" vmlauncher="false" failonerror="false">
            <arg line="/build Release
                src/tools/testapps/AgentCentricity/AgentCentricity.sln
                /out BuildLog.txt"/>
        </exec>
        <copy todir="${dir.projects.converted}\BVTs">
            <fileset file="src/tools/testapps/AgentCentricity/AgentCentricity/bin/Release/AgentCentricity.dll"/>
        </copy>
    </target>
    <target name="make-BVT-CentricityBVT">
        <exec executable="${vs100_devenv}" vmlauncher="false" failonerror="false">
            <arg line="/build Release
                src/tools/testapps/CentricityBVT/autotest.sln
                /out BuildLog.txt"/>
        </exec>
        <copy todir="${dir.projects.converted}\BVTs">
            <fileset file="src/tools/testapps/CentricityBVT/autotest/bin/Release/autotest.dll"/>
        </copy>
    </target>
    <target name="make-BVT-ReviewAdvocate">
        <exec executable="${vs100_devenv}" vmlauncher="false" failonerror="false">
            <arg line="/build Release
                src/tools/testapps/ReviewAdvocate/ReviewAdvocate.sln
                /out BuildLog.txt"/>
        </exec>
        <copy todir="${dir.projects.converted}\BVTs">
            <fileset file="src/tools/testapps/ReviewAdvocate/ReviewAdvocate/bin/Release/ReviewAdvocate.dll"/>
        </copy>
    </target>

    <!-- ================================================================= -->
    <!-- Make ADIT                                                         -->
    <!-- ================================================================= -->
    <target name="make-ADIT" description="Makes ADIT">
        <build-cpp solution.file="src/tools/ADIT/Gold/ADIT.sln"/>
    </target>

    <!-- ================================================================= -->
    <!-- Make Administrator.exe                                            -->
    <!-- ================================================================= -->
    <target name="make-Administrator" description="Makes Administrator.exe">
        <build-cpp solution.file="src/clients/admin/Administrator/Administrator.vcproj"/>
    </target>

    <!-- ================================================================= -->
    <!--  Make AgentAdherence.ocx                                          -->
    <!-- ================================================================= -->
    <target name="make-AgentAdherence_OCX" description="Makes AgentAdherence.ocx">
        <build-cpp solution.file="src/clients/wfm/agentadherence/AgentAdherence.vcproj"/>
    </target>

    <!-- ================================================================= -->
    <!--  Make Agent Automation                                            -->
    <!-- ================================================================= -->
    <target name="make-AgentAutomation" description="Makes AgentAutomation.dll">
        <build-cpp solution.file="src/apis/AgentAutomation.sln"/>
    </target>

    <!-- ================================================================= -->
    <!--  Make AgentSchedule.ocx                                           -->
    <!-- ================================================================= -->
    <target name="make-AgentSchedule_OCX" description="Makes AgentSchedule.ocx">
        <build-cpp solution.file="src/clients/wfm/agentschedule/AgentSchedule.vcproj"/>
    </target>

    <!-- ================================================================= -->
    <!--  Make AgentSupport                                                -->
    <!-- ================================================================= -->
    <target name="make-AgentSupport" description="Makes AgentSupport">
        <build-cpp solution.file="src/clients/AgentSupport.sln"/>
        <build-cpp configuration="ReleaseGerman" solution.file="src/clients/AgentSupport.sln"/>
        <build-cpp configuration="ReleaseSpanish" solution.file="src/clients/AgentSupport.sln"/>
    </target>

    <!-- ================================================================= -->
    <!--  Make AgentX.ocx                                                  -->
    <!-- ================================================================= -->
    <target name="make-AgentX_OCX" description="Makes AgentX.ocx">
        <build-cpp solution.file="src/clients/quality/agentdesktop/AgentX.vcproj"/>
        <build-cpp configuration="ReleaseGerman"
            solution.file="src/clients/quality/agentdesktop/AgentX.vcproj"/>
        <build-cpp configuration="ReleaseSpanish"
            solution.file="src/clients/quality/agentdesktop/AgentX.vcproj"/>
    </target>

    <!-- ================================================================= -->
    <!-- Make AGMS                                                         -->
    <!-- ================================================================= -->
    <target name="make-AGMS" description="Makes AGMS">
        <build-cpp solution.file="src/tools/AGMS/AGMS.sln"/>
    </target>

    <!-- ================================================================= -->
    <!-- Make AnalyticsUtilities                                           -->
    <!-- ================================================================= -->
    <target name="make-AnalyticsUtilities" description="Makes EnvisionAnalyticsUtilities.dll">
        <build-cpp solution.file="src/clients/centricity/Analytics/AnalyticsUtilities/AnalyticsUtilities.sln"/>
    </target>

    <!-- ================================================================= -->
    <!-- Make C# APICommon.dll                                             -->
    <!-- ================================================================= -->
    <target name="make-APICommon_CS" description="Makes APICommon.dll">
        <build-cpp solution.file="src/apis/bi/com/et/bi/api/common/APICommon.csproj"/>
    </target>

    <!-- ================================================================= -->
    <!-- Make Automated Tagger DLLs                                        -->
    <!-- ================================================================= -->
    <!-- VB, but compiled with build-CSharp (go figure) -->
    <target name="make-AutoTagger" description="Makes Automated Tagger DLLs">
        <build-cpp solution.file="src/clients/focus/PSPost.root/AutomatedTagger.sln"/>
    </target>

    <!-- ================================================================= -->
    <!--  Make C2CReportingControls.ocx                                    -->
    <!-- ================================================================= -->
    <target name="make-C2CReportingControls_OCX" description="Makes C2CReportingControls.ocx">
        <build-cpp solution.file="src/clients/reporting/C2CReportingControls/C2CReportingControls.sln"/>
        <build-cpp configuration="ReleaseGerman"
            solution.file="src/clients/reporting/C2CReportingControls/C2CReportingControls.sln"/>
        <build-cpp configuration="ReleaseSpanish"
            solution.file="src/clients/reporting/C2CReportingControls/C2CReportingControls.sln"/>
    </target>

    <!-- ================================================================= -->
    <!-- Make BI Call Tagger                                               -->
    <!-- ================================================================= -->
    <target name="make-CallTagger_CS" description="Makes BI Call Tagger">
        <build-cpp solution.file="src/apis/bi/com/et/bi/api/tagger/ETCallTagger.csproj"/>
    </target>

    <!-- ================================================================= -->
    <!-- Make Centricity web app                                           -->
    <!-- ================================================================= -->
    <!-- Dependencies:
    . \\Bigfoot\Engineering\Software\MICROSOFT\VS2005Pro-SP1
    . \\Bigfoot\Engineering\Software\MICROSOFT\VS2005 Addins\webdeploymentsetup.msi
    . ASPAJAXExtSetup.msi [ASP.NET 2.0 AJAX Extensions 1.0] -->
    <target name="make-Centricity" description="Makes Centricity web app">
        <build-cpp configuration="Production" solution.file="src/clients/centricity/Centricity.sln"/>
    </target>

    <!-- ================================================================= -->
    <!--  Make Channel Manager                                             -->
    <!-- ================================================================= -->
    <target name="make-ChannelManager" description="Makes channelmanager devenv.exe">
        <build-cpp solution.file="src/winservices/ChannelManager.sln"/>
    </target>

    <!-- ================================================================= -->
    <!--  Make CiscoICM                                                    -->
    <!-- ================================================================= -->
    <target name="make-CiscoICM" description="Makes CiscoICM.dll">
        <build-cpp solution.file="src/contactsources/ciscoicm/CiscoICM.vcproj"/>
    </target>

    <!-- ================================================================= -->
    <!-- Make ContactSourceUtilities.lib                                   -->
    <!-- ================================================================= -->
    <target name="make-ContactSourceUtilities_LIB" description="Makes ContactSourceUtils.lib">
        <build-cpp solution.file="src/contactsources/contactsourceutilities/ContactSourceUtils.sln"/>
    </target>

    <!-- ================================================================= -->
    <!-- Make CSTA Loader                                                   -->
    <!-- ================================================================= -->
    <!-- TODO is there a cstaLoader solution? -timc, Cinco de Mayo 2010 -->
    <!-- where is 6_4_3 ? -timc 2/16/2011 -->
    <target name="make-cstaLoader" description="Makes cstaLoader">
        <build-cpp solution.file="src/contactsources/tsapi/cstaLoader/cstaLoader.vcproj"/>
        <build-cpp configuration="Release_1_2"
            solution.file="src/contactsources/tsapi/cstaLoader/cstaLoader.vcproj"/>
        <build-cpp configuration="Release_1_3_3"
            solution.file="src/contactsources/tsapi/cstaLoader/cstaLoader.vcproj"/>
        <build-cpp configuration="Release_3_33"
            solution.file="src/contactsources/tsapi/cstaLoader/cstaLoader.vcproj"/>
        <!-- Note the different path.  This is for Alcatel. -timc 9/29/2010 -->
        <build-cpp configuration="Release_6_4_3" solution.file="src/winservices/SourceRunnerService.sln"/>
        <build-cpp configuration="Release_9_1"
            solution.file="src/contactsources/tsapi/cstaLoader/cstaLoader.vcproj"/>
        <build-cpp configuration="Release_9_5"
            solution.file="src/contactsources/tsapi/cstaLoader/cstaLoader.vcproj"/>
    </target>

    <!-- ================================================================= -->
    <!--  Make ctcLoader6.0                                                -->
    <!-- ================================================================= -->
    <!-- TODO is there a ctcLoader solution? -timc, Cinco de Mayo 2010 -->
    <target name="make-ctcLoader6.0" description="Makes ctcLoader6.0">
        <build-cpp solution.file="src/contactsources/netmerge/ctcLoader_6_0/ctcLoader_6_0.vcproj"/>
    </target>

    <!-- ================================================================= -->
    <!--  Make ctcLoader7.0                                                -->
    <!-- ================================================================= -->
    <!-- TODO is there a ctcLoader solution? -timc, Cinco de Mayo 2010 -->
    <target name="make-ctcLoader7.0" description="Makes ctcLoader7.0">
        <build-cpp solution.file="src/contactsources/netmerge/ctcLoader_7_0/ctcLoader.vcproj"/>
    </target>

    <!-- ================================================================= -->
    <!-- Make DADI                                                         -->
    <!-- ================================================================= -->
    <!-- It's not in buildtools/branches/9.0/SP4/base/buildC#CPP.xml -->
    <target name="make-DADI" description="Makes DADI">
        <build-cpp solution.file="src/tools/DADI/DADI.sln"/>
    </target>

    <!-- ================================================================= -->
    <!-- Make legacy (v1) DBMigration                                      -->
    <!-- ================================================================= -->
    <target name="make-DBMigration_v1" description="Makes DBMigrationWizard.exe">
        <build-cpp solution.file="src/tools/DBMigration/v1/DBMIGRATIONWIZARD/DBMigrationWizard.sln"/>
    </target>

    <!-- ================================================================= -->
    <!-- Make new (v2) DBMigration                                         -->
    <!-- ================================================================= -->
    <!--
    <target name="make-DBMigration_v2" description="Makes DBMigrationWizard.exe">
        <build-cpp solution.file="src/tools/DBMigration/v2/DBMIGRATIONWIZARD/DBMigrationWizard.sln"/>
    </target>
    -->

    <!-- ================================================================= -->
    <!-- Make DeployAnalyticsTool                                          -->
    <!-- ================================================================= -->
    <target name="make-DeployAnalyticsTool" description="TODO">
        <build-cpp solution.file="src/clients/centricity/Analytics/DeployAnalyticsTool/DeployAnalyticsTool.sln"/>
    </target>

    <!-- ================================================================= -->
    <!-- Make DialogicChannel60                                            -->
    <!-- ================================================================= -->
    <!-- TODO why is this a separate vcproj? -timc 5/4/2009 -->
    <target name="make-DialogicChannel60" description="Makes DialogicChannel60 devenv.exe">
        <build-cpp configuration="ReleaseSR60" solution.file="src/winservices/ChannelManager.sln"/>
    </target>

    <!-- ================================================================= -->
    <!--  Make eLearning                                                   -->
    <!-- ================================================================= -->
    <!-- TODO is there an eLearning solution? -timc, Cinco de Mayo -->
    <target name="make-eLearning" description="Makes eLearning">
        <build-cpp configuration="eLearningRelease" solution.file="src/clients/quality/qm/qm.vcproj"/>
        <build-cpp configuration="eLearningReleaseGerman" solution.file="src/clients/quality/qm/qm.vcproj"/>
        <build-cpp configuration="eLearningReleaseSpanish" solution.file="src/clients/quality/qm/qm.vcproj"/>
    </target>

    <!-- ================================================================= -->
    <!-- Make EnvisionCLR (includes DeployAnalyticsTool)                   -->
    <!-- ================================================================= -->
    <target name="make-EnvisionCLR" description="Makes EnvisionCLR.dll for use with RDL files">
        <build-cpp solution.file="src/clients/centricity/Analytics/EnvisionCLR/EnvisionCLR.sln"/>
    </target>

    <!-- ================================================================= -->
    <!-- Make ETService                                                    -->
    <!-- ================================================================= -->
    <!-- TODO is there an EnvisionService solution? -timc, Cinco de Mayo -->
    <target name="make-EnvisionService" description="Makes ETService.exe">
        <!-- NOTE: I'm not sure exactly what this is doing for us, but the
        ETService Release configuration occasionally fails with errors about
        multiply defined libraries.  Running this batch file fixes it.  But it
        needs to be run in the same environment as ETService.vcproj.  That's
        why it's not invoked with executable="cmd.exe" and arg
        line="vsvars.bat" (although that seems to work as well). -->
        <exec dir="${env.VS90COMNTOOLS}" executable="cmd.exe">
            <arg line="vsvars32.bat"/>
        </exec>
        <build-cpp solution.file="src/server/startserverprocess/C2CServerPro.vcproj"/>
        <build-cpp solution.file="src/server/shutdownserverprocess/ShutdownServer.vcproj"/>
        <build-cpp solution.file="src/winservices/etservice/ETService.vcproj"/>
        <build-cpp solution.file="src/winservices/etservice/ETServiceInstall.vcproj"/>
    </target>

    <!-- ================================================================= -->
    <!-- Make Evaluation Consistency Check                                 -->
    <!-- ================================================================= -->
    <target name="make-EvaluationConsistencyCheck" description="Make EvaluationConsistencyCheck.exe (a database migration utility)">
        <build-cpp solution.file="src/tools/EvaluationConsistencyCheck/EvaluationConsistencyCheck.sln"/>
    </target>

    <!-- ================================================================= -->
    <!-- Make C# finder.dll                                                -->
    <!-- ================================================================= -->
    <!-- TODO is there a Finder solution? -timc, Cinco de Mayo -->
    <target name="make-Finder_CS" description="Makes finder.dll">
        <build-cpp solution.file="src/apis/bi/com/et/bi/api/finder/finder.csproj"/>
    </target>

    <!-- ================================================================= -->
    <!-- Make BI Finder Client                                             -->
    <!-- ================================================================= -->
    <!-- TODO is there a FinderClient solution? -timc, Cinco de Mayo -->
    <target name="make-FinderClient_CS" description="Makes BI Finder Client">
        <build-cpp solution.file="src/clients/finder/finderclient.csproj"/>
    </target>

    <!-- ================================================================= -->
    <!-- Make Generated                                                    -->
    <!-- ================================================================= -->
    <!-- TODO is there a Generated solution? -timc, Cinco de Mayo -->
    <target name="make-Generated" description="Makes generated devenv.exe">
        <build-cpp solution.file="src/generated/generated.vcproj"/>
    </target>

    <!-- ================================================================= -->
    <!--  Make hook                                                        -->
    <!-- ================================================================= -->
    <!-- Per Ed in email, 1/21/09 "This is the hook.dll component for getting
    Windows messages into AgentSupport to process start/stop email captures.
    This is used for email integrations.  This is a class of components that
    just needs to be built once when we change toolset (compiler version)."
    -->
    <target name="make-hook" description="Makes hook.dll">
        <build-cpp solution.file="src/clients/quality/agentsupport/monitoring/KanaDriver/dll/hook.sln"/>
    </target>

    <!-- ================================================================= -->
    <!-- Make JavaContactSource.dll                                        -->
    <!-- ================================================================= -->
    <!-- TODO is there a JavaContactSource solution? -timc, Cinco de Mayo -->
    <target name="make-JavaContactSource" description="Makes javacontactsource.dll">
        <build-cpp solution.file="src/contactsources/javacontactsource/JavaContactSource.vcproj"/>
    </target>

    <!-- ================================================================= -->
    <!-- Make NativeServiceWin32                                           -->
    <!-- ================================================================= -->
    <target name="make-NativeServiceWin32" description="Makes NativeServiceWin32.dll">
        <build-cpp solution.file="src/server/nativeservicewin32/nativeServiceWin32.sln"/>
    </target>

    <!-- ================================================================= -->
    <!-- Make NotificationWindow.lib                                       -->
    <!-- ================================================================= -->
    <!-- TODO is there a NotificationWindow solution? -timc, Cinco de Mayo -->
    <target name="make-NotificationWindow_LIB" description="Makes notificationwindow.lib">
        <build-cpp solution.file="src/clients/quality/notificationwindow/NotificationWindow.vcproj"/>
    </target>

    <!-- ================================================================= -->
    <!-- Make BI Portal                                                    -->
    <!-- ================================================================= -->
    <!-- TODO is there a BI Portal solution? -timc, Cinco de Mayo -->
    <target name="make-Portal_CS" description="Makes BI Portal">
        <build-cpp solution.file="src/clients/portal/portal.csproj"/>
    </target>

    <!-- ================================================================= -->
    <!--  Make Quality Monitoring                                          -->
    <!-- ================================================================= -->
    <!-- TODO is there a QM solution? -timc, Cinco de Mayo -->
    <target name="make-QualityMonitoring" description="Makes QM">
        <build-cpp solution.file="src/clients/quality/qm/qm.vcproj"/>
        <build-cpp configuration="ReleaseGerman" solution.file="src/clients/quality/qm/qm.vcproj"/>
        <build-cpp configuration="ReleaseSpanish" solution.file="src/clients/quality/qm/qm.vcproj"/>
    </target>

    <!-- ================================================================= -->
    <!-- Make RegUtils                                                     -->
    <!-- ================================================================= -->
    <!-- TODO is there a RegUtils solution? -timc, Cinco de Mayo -->
    <target name="make-RegUtils" description="Makes RegUtils.lib">
        <build-cpp solution.file="src/clients/quality/regutils/regutils.vcproj"/>
        <!-- TODO are we using this? -timc 5/27/2009 -->
        <build-cpp configuration="Debug" solution.file="src/clients/quality/regutils/regutils.vcproj"/>
    </target>

    <!-- ================================================================= -->
    <!--  Make RO                                                          -->
    <!-- ================================================================= -->
    <!-- TODO is there a RO solution? -timc, Cinco de Mayo -->
    <target name="make-RO" description="Makes RO">
        <build-cpp solution.file="src/server/ro/cpp/ro.vcproj"/>
        <!-- TODO are we using this? -timc 5/27/2009 -->
        <build-cpp configuration="Debug" solution.file="src/server/ro/cpp/ro.vcproj"/>
    </target>

    <!-- ================================================================= -->
    <!-- Make Serializable                                                 -->
    <!-- ================================================================= -->
    <!-- TODO is there a Serializable solution? -timc, Cinco de Mayo -->
    <target name="make-Serializable_LIB" description="Makes Serializable.lib">
        <build-cpp solution.file="src/serializable/serializable.vcproj"/>
    </target>

    <!-- ================================================================= -->
    <!-- Make C# Server                                                    -->
    <!-- ================================================================= -->
    <!-- NB: The project is corearch in Acme, and server in Maya -->
    <target name="make-Server_CS" description="Makes Server.dll">
        <build-cpp solution.file="src/server/server.sln"/>
    </target>

    <!-- ================================================================= -->
    <!-- Make Shared.Lib                                                   -->
    <!-- ================================================================= -->
    <!-- TODO is there a SharedLib solution? -timc, Cinco de Mayo -->
    <target name="make-Shared_LIB" description="Makes Shared Lib">
        <build-cpp solution.file="src/clients/quality/shared/Shared.vcproj"/>
    </target>

    <!-- ================================================================= -->
    <!--  Make SharedResources DLL                                         -->
    <!-- ================================================================= -->
    <!-- TODO is there a SharedResources solution? -timc, Cinco de Mayo -->
    <target name="make-SharedResources" description="Makes SharedResources.dll">
        <!-- 9.10.x or later, localization with Release for English -->
        <echo message="Release, ReleaseGerman, ReleaseSpanish"/>
        <build-cpp solution.file="src/clients/quality/sharedresources/SharedResources.vcproj"/>
        <build-cpp configuration="ReleaseGerman"
            solution.file="src/clients/quality/sharedresources/SharedResources.vcproj"/>
        <build-cpp configuration="ReleaseSpanish"
            solution.file="src/clients/quality/sharedresources/SharedResources.vcproj"/>
    </target>

    <!-- ================================================================= -->
    <!--  Make SmartAgentErrs                                              -->
    <!-- ================================================================= -->
    <!-- TODO is there a SmartAgentErrs solution? -timc, Cinco de Mayo -->
    <!-- TODO Make sure mc.exe is on the PATH -->
    <target name="make-SmartAgentErrs" description="Makes SmartAgentErrs.dll">
        <exec dir="src/clients/quality/agentsupport/smartagenterrs"
            executable="mc.exe" vmlauncher="${vmlauncher}" failonerror="true">
<!-- executable="C:/bin/mc.exe" vmlauncher="${vmlauncher}" failonerror="true"> -->
            <arg line="-v -c -s -h ..\ -r .\ -x .\ -U smartagenterrs.mc"/>
        </exec>
        <build-cpp solution.file="src/clients/quality/agentsupport/smartagenterrs/SmartAgentErrs.vcproj"/>
    </target>

    <!-- ================================================================= -->
    <!-- Make SourceRunnerService.exe                                      -->
    <!-- ================================================================= -->
    <target name="make-SourceRunner" depends="make-ContactSourceUtilities_LIB"
        description="Makes SourceRunnerService.exe">
        <build-cpp solution.file="src/winservices/SourceRunnerService.sln"/>
    </target>

    <!-- ================================================================= -->
    <!-- Make Speech Server Service and Speech Processing Client           -->
    <!-- ================================================================= -->
    <target name="make-Speech" depends="make-Centricity"
        description="Makes SpeechServerService and SpeechProcessingClient">
        <build-cpp solution.file="src/winservices/AudioMining.sln"/>
    </target>

    <!-- ================================================================= -->
    <!-- Make C# TaggerWrapperService.dll                                  -->
    <!-- ================================================================= -->
    <!-- TODO is there a TaggerWrapperService solution? -timc, Cinco de Mayo -->
    <target name="make-TaggerWrapperService_CS" description="Makes TaggerWrapperService.dll">
        <build-cpp solution.file="src/apis/bi/com/et/bi/api/tagger/wrapperservice/TaggerWrapperService.csproj"/>
    </target>

    <!-- ================================================================= -->
    <!-- Make BI Tagging Client                                            -->
    <!-- ================================================================= -->
    <!-- TODO is there a TaggingClient solution? -timc, Cinco de Mayo -->
    <target name="make-TaggingClient_CS" description="Makes BI Tagging Client">
        <build-cpp solution.file="src/clients/taggingclient/TaggingClient.csproj"/>
    </target>

    <!-- ================================================================= -->
    <!-- Make TSAPI                                                        -->
    <!-- ================================================================= -->
    <!-- TODO is there a TSAPI solution? -timc, Cinco de Mayo -->
    <target name="make-TSAPI" description="Makes tsapi">
        <build-cpp solution.file="src/contactsources/tsapi/Tsapi.vcproj"/>
    </target>

    <!-- ================================================================= -->
    <!-- Make UserTree                                                     -->
    <!-- ================================================================= -->
    <!-- TODO is there a UserTree solution? -timc, Cinco de Mayo -->
    <target name="make-UserTree_LIB" description="Makes usertree.lib devenv.exe">
        <build-cpp solution.file="src/clients/quality/usertree/usertree.vcproj"/>
    </target>

    <!-- ================================================================= -->
    <!-- Make WebControls.ocx                                              -->
    <!-- ================================================================= -->
    <!-- TODO is there a WebControls solution? -timc, Cinco de Mayo -->
    <target name="make-WebControls_OCX" description="Makes WebControls.ocx">
        <build-cpp solution.file="src/clients/reporting/controls/WebControls.vcproj"/>
        <build-cpp configuration="ReleaseGerman"
            solution.file="src/clients/reporting/controls/WebControls.vcproj"/>
        <build-cpp configuration="ReleaseSpanish"
            solution.file="src/clients/reporting/controls/WebControls.vcproj"/>
    </target>

    <!-- ================================================================= -->
    <!-- Make WFM                                                          -->
    <!-- ================================================================= -->
    <!-- TODO do we still need this? -timc 2/17/2011 -->
    <target name="make-WFM" description="Makes WFM">
        <build-cpp solution.file="src/clients/wfm/wfm.sln"/>
    </target>

    <!-- ================================================================= -->
    <!-- Make Windows Media Wrapper Service                                -->
    <!-- ================================================================= -->
    <!-- C:\Source\Maya\src\winservices\WMWrapperService\Redist\setup.bat -->
    <!-- NB: this target depends on WMEncoder.exe being installed on the build
    machine.  It's available locally at
    \\Bigfoot\Engineering\Software\Installs\WindowsMediaEncoder9 -->
    <target name="make-WMWrapperService" depends="register-NCT-binaries"
        description="Makes Windows Media wrapper service for Centricity">
        <build-cpp solution.file="src/winservices/WMWrapperService/WMWrapperService.sln"/>
    </target>

    <!-- ================================================================= -->
    <!-- Make XFloorWnd.ocx                                                -->
    <!-- ================================================================= -->
    <!-- TODO is there an XFloorWnd solution? -timc, Cinco de Mayo -->
    <target name="make-XFloorWnd" description="Makes XFloorWnd.ocx">
        <build-cpp solution.file="src/clients/quality/xfloorwnd/XFloorWnd.vcproj"/>
    </target>

    <!-- ================================================================= -->
    <!-- Make, sign, and publish Centricity AV Player (Click Once)         -->
    <!-- ================================================================= -->
    <!-- timc: Do we need this any longer? -->
    <target name="publish-AVPlayer" description="Publishes Centricity AVPlayer (Click Once) using MSBuild">
        <exec executable="${compiler.msbuild}" vmlauncher="${vmlauncher}" failonerror="true">
            <arg line="/target:publish src/clients/AVPlayer/AVPlayer.csproj /property:Configuration=Release;PublishDir=pubdir/ /l:FileLogger,Microsoft.Build.Engine;logfile=BuildLog.txt;append=true"/>
        </exec>
        <move todir="workdir/AVPlayer">
            <fileset dir="src/clients/AVPlayer/pubdir"/>
        </move>
    </target>

    <!-- ================================================================= -->
    <!-- Make, sign, and publish RecordingDownloadTool (Click Once)        -->
    <!-- ================================================================= -->
    <!-- timc: Do we need this any longer? -->
    <target name="publish-RecordingDownloadTool" description="Publishes Centricity RecordingDownloadTool (Click Once) using MSBuild">
        <exec executable="${compiler.msbuild}" vmlauncher="${vmlauncher}" failonerror="true">
            <arg line="/target:publish src/clients/RecordingDownloadTool/RecordingDownloadTool.csproj /property:Configuration=Release;PublishDir=pubdir/ /l:FileLogger,Microsoft.Build.Engine;logfile=BuildLog.txt;append=true"/>
        </exec>
        <move todir="workdir/RecordingDownloadTool">
            <fileset dir="src/clients/RecordingDownloadTool/pubdir"/>
        </move>
    </target>

    <!-- ================================================================= -->
    <!-- Register NCT binaries (for use with WMWrapperService)             -->
    <!-- ================================================================= -->
    <target name="register-NCT-binaries">
        <!-- Don't fail on error.  The binaries may already be registered. -->
        <apply executable="regsvr32" relative="true" dir="src/winservices/WMWrapperService/Redist">
            <!-- trailing space may be important here -->
            <arg line="/s "/>
            <fileset dir="src/winservices/WMWrapperService/Redist" includes="**/NCT*.dll"/>
        </apply>
    </target>
    <!--
    regsvr32 exit codes:

    0 { &$Write "$DllPath Registered Successfully" }
    1 { &$Write "Bad arguments to RegSvr32" }
    2 { &$Write "OLE initialization failed for $DllPath" }
    3 { &$Write "Failed to load the module ($DllPath), you may need to check for problems with dependencies." }
    4 { &$Write "Can't find DllRegisterServer entry point in the file ($DllPath), maybe it's not a .DLL or .OCX?" }
    5 { &$Write "The assembly ($DllPath) was loaded, but the call to DllRegisterServer failed." }

    courtesy of
    http://huddledmasses.org/register-dll-calling-regsvr32-without-messageboxes-in-powershell/

    Watch out for result code 3.  This probably means that regsvr32 is not
    being run from the same directory as where the DLLs are located.
    -->

    <!-- ================================================================= -->
    <!--  Sign AgentAdherence.ocx                                          -->
    <!-- ================================================================= -->
    <!-- TODO is there an AgentAdherence solution? -timc, Cinco de Mayo -->
    <target name="sign-AgentAdherence_OCX" depends="make-AgentAdherence_OCX"
        description="Digitally signs AgentAdherence.ocx to verify its authenticity.">
        <!-- NB: don't forget the ${basedir}! -->
        <exec executable="signtool.exe" vmlauncher="${vmlauncher}" failonerror="true">
            <arg line="sign /a /f ${cert.envision} /p ${signtool.password} /t ${signtool.timestampurl} workdir/wfm/AgentAdherence.ocx"/>
        </exec>
    </target>

    <!-- ================================================================= -->
    <!--  Sign AgentSchedule.ocx                                           -->
    <!-- ================================================================= -->
    <!-- TODO is there an AgentSchedule solution? -timc, Cinco de Mayo -->
    <target name="sign-AgentSchedule_OCX" depends="make-AgentSchedule_OCX"
        description="Digitally signs AgentSchedule.ocx to verify its authenticity.">
        <!-- NB: don't forget the ${basedir}! -->
        <exec executable="signtool.exe" vmlauncher="${vmlauncher}" failonerror="true">
            <arg line="sign /a /f ${cert.envision} /p ${signtool.password} /t ${signtool.timestampurl} workdir/wfm/AgentSchedule.ocx"/>
        </exec>
    </target>

    <!-- ================================================================= -->
    <!--  Sign AgentX.ocx                                                  -->
    <!-- ================================================================= -->
    <!-- TODO is there an AgentX solution? -timc, Cinco de Mayo -->
    <target name="sign-AgentX_OCX" depends="make-AgentX_OCX"
        description="Digitally signs AgentX.ocx to verify its authenticity.">
        <!-- English -->
        <exec executable="signtool.exe" vmlauncher="${vmlauncher}" failonerror="true">
            <arg line="sign /a /f ${cert.envision} /p ${signtool.password} /t ${signtool.timestampurl} workdir/quality/AgentX.ocx"/>
        </exec>
        <!-- NB: don't forget the ${basedir}! -->
        <!-- TODO Make sure signtool.exe is on the PATH -->
        <!-- German -->
        <exec executable="signtool.exe" vmlauncher="${vmlauncher}" failonerror="true">
            <arg line="sign /a /f ${cert.envision} /p ${signtool.password} /t ${signtool.timestampurl} src/clients/quality/agentdesktop/ReleaseGerman/AgentX.ocx"/>
        </exec>
        <!-- Spanish -->
        <exec executable="signtool.exe" vmlauncher="${vmlauncher}" failonerror="true">
            <arg line="sign /a /f ${cert.envision} /p ${signtool.password} /t ${signtool.timestampurl} src/clients/quality/agentdesktop/ReleaseSpanish/AgentX.ocx"/>
        </exec>
    </target>

    <!-- ================================================================= -->
    <!-- Sign AnalyticsResources                                           -->
    <!-- ================================================================= -->
    <!-- TODO is there an AnalyticsResources solution? -timc, Cinco de Mayo -->
    <target name="sign-AnalyticsResources" depends="make-DeployAnalyticsTool"
        description="Digitally signs EnvisionAnalyticsResources.dll to verify its authenticity.">
        <!-- NB: don't forget the ${basedir}! -->
        <exec executable="signtool.exe" vmlauncher="${vmlauncher}" failonerror="true">
            <!-- /f ${dir.build}/setup/Signature/myprivatecert.pfx -->
            <arg line="sign /a /f ${cert.envision} /p ${signtool.password} /t ${signtool.timestampurl} src/clients/Centricity/Analytics/AnalyticsResources/obj/Release/EnvisionAnalyticsResources.dll"/>
        </exec>
    </target>

    <!-- ================================================================= -->
    <!-- Sign AnalyticsUtilities                                           -->
    <!-- ================================================================= -->
    <target name="sign-AnalyticsUtilities" depends="make-AnalyticsUtilities"
        description="Digitally signs EnvisionAnalyticsUtilities.dll to verify its authenticity.">
        <!-- NB: don't forget the ${basedir}! -->
        <exec executable="signtool.exe" vmlauncher="${vmlauncher}" failonerror="true">
            <!-- /f ${dir.build}/setup/Signature/myprivatecert.pfx -->
            <arg line="sign /a /f ${cert.envision} /p ${signtool.password} /t ${signtool.timestampurl} src/clients/Centricity/Analytics/AnalyticsUtilities/obj/Release/EnvisionAnalyticsUtilities.dll"/>
        </exec>
    </target>

    <!-- ================================================================= -->
    <!--  Sign C2CReportingControls.ocx                                    -->
    <!-- ================================================================= -->
    <!-- TODO is there a C2CReportingControls solution? -timc, Cinco de Mayo -->
    <target name="sign-C2CReportingControls_OCX" depends="make-C2CReportingControls_OCX"
        description="Digitally signs C2CReportingControls.ocx to verify its authenticity.">
        <!-- English -->
        <!-- NB: don't forget the ${basedir}! -->
        <exec executable="signtool.exe" vmlauncher="${vmlauncher}" failonerror="true">
            <arg line="sign /a /f ${cert.envision} /p ${signtool.password} /t ${signtool.timestampurl} src/clients/reporting/C2CReportingControls/Release/C2CReportingControls.ocx"/>
        </exec>
        <!-- German -->
        <!-- NB: don't forget the ${basedir}! -->
        <!-- TODO Make sure signtool.exe is on the PATH -->
        <exec executable="signtool.exe" vmlauncher="${vmlauncher}" failonerror="true">
            <arg line="sign /a /f ${cert.envision} /p ${signtool.password} /t ${signtool.timestampurl} src/clients/reporting/C2CReportingControls/ReleaseGerman/C2CReportingControls.ocx"/>
        </exec>
        <!-- Spanish -->
        <!-- NB: don't forget the ${basedir}! -->
        <!-- TODO Make sure signtool.exe is on the PATH -->
        <exec executable="signtool.exe" vmlauncher="${vmlauncher}" failonerror="true">
            <arg line="sign /a /f ${cert.envision} /p ${signtool.password} /t ${signtool.timestampurl} src/clients/reporting/C2CReportingControls/ReleaseSpanish/C2CReportingControls.ocx"/>
        </exec>
    </target>

    <!-- ================================================================= -->
    <!-- Sign EnvisionCLR (includes DeployAnalyticsTool)                   -->
    <!-- ================================================================= -->
    <target name="sign-EnvisionCLR" depends="make-EnvisionCLR"
        description="Digitally signs EnvisionCLR.dll to verify its authenticity.">
        <!-- NB: don't forget the ${basedir}! -->
        <exec executable="signtool.exe" vmlauncher="${vmlauncher}" failonerror="true">
            <!-- /f ${dir.build}/setup/Signature/myprivatecert.pfx -->
            <arg line="sign /a /f ${cert.envision} /p ${signtool.password} /t ${signtool.timestampurl} src/clients/Centricity/Analytics/EnvisionCLR/obj/Release/EnvisionCLR.dll"/>
        </exec>
    </target>

    <!-- ================================================================= -->
    <!-- Sign WebControls.ocx                                              -->
    <!-- ================================================================= -->
    <target name="sign-WebControls_OCX" depends="make-WebControls_OCX"
        description="Digitally signs WebControls.ocx to verify its authenticity.">
        <!-- English -->
        <!-- NB: don't forget the ${basedir}! -->
        <exec executable="signtool.exe" vmlauncher="${vmlauncher}" failonerror="true">
            <arg line="sign /a /f ${cert.envision} /p ${signtool.password} /t ${signtool.timestampurl} workdir/agentdesktop/WebControls.ocx"/>
        </exec>
        <!-- German -->
        <!-- NB: don't forget the ${basedir}! -->
        <exec executable="signtool.exe" vmlauncher="${vmlauncher}" failonerror="true">
            <arg line="sign /a /f ${cert.envision} /p ${signtool.password} /t ${signtool.timestampurl} src/clients/reporting/controls/ReleaseGerman/WebControls.ocx"/>
        </exec>
        <!-- Spanish -->
        <!-- NB: don't forget the ${basedir}! -->
        <exec executable="signtool.exe" vmlauncher="${vmlauncher}" failonerror="true">
            <arg line="sign /a /f ${cert.envision} /p ${signtool.password} /t ${signtool.timestampurl} src/clients/reporting/controls/ReleaseSpanish/WebControls.ocx"/>
        </exec>
    </target>
</project>

