#
# Properties file for EPS builds.
#

# Notes:
#
# (1) DEVELOPERS: set dir.build to your product source
#
# (2) DEVELOPERS: let me know if some properties are wrong for your machine
#
# (3) OFFICIAL BUILDS: nuke the entire working directory!!
#
# (*) Kung POW!


# from http://ant.apache.org/manual/install.html
#
# * When you need JDK functionality (such as for the javac task or the rmic
#   task), then tools.jar must be added.  The scripts supplied with Ant, in
#   the bin directory, will add the required JDK classes automatically, if the
#   JAVA_HOME environment variable is set.
#
# * When you are executing platform-specific applications, such as the exec
#   task or the cvs task, the property ant.home must be set to the directory
#   containing where you installed Ant.  Again this is set by the Ant scripts
#   to the value of the ANT_HOME environment variable.

# from http://javahowto.blogspot.com/2006/05/javahome-vs-javahome.html
#
# What's the difference between JAVA_HOME and java.home?  JAVA_HOME is the JDK
# install directory, e.g., C:\jdk5.  It's meant to be set as an environment
# variable and referenced in Windows batch files or Unix scripts.
#
# java.home is the JRE install directory, e.g., C:\jdk5\jre, or C:\Program
# Files\Java\jre1.5.0_06.  Unlike JAVA_HOME, I never seen java.home as an
# environment variable.  java.home is a build-in Java system property, whose
# value is the JRE install directory.  Since all Java system properties are
# also exposed as Ant build properties, you can also use ${java.home} in build
# files.
#
# Mindprod has a similar description here:
# http://mindprod.com/jgloss/javahome.html


# ----------------------------------------------------------------------------
# product source paths
# ----------------------------------------------------------------------------
dir.src=src
dir.release=Release
dir.workdir=workdir
dir.installs=setup/installs


# ----------------------------------------------------------------------------
# buildtools paths -- relative to this file
# ----------------------------------------------------------------------------
# What to do about this?  With the build scripts moving back in with the
# product source, I'll have to find a new home for them.
# TODO add insert.exe and 7za.exe to PATH, delete this
dir.bin=./bin
dir.lib=./lib


# ----------------------------------------------------------------------------
# Bigfoot SDK dirs
# ----------------------------------------------------------------------------
# TODO fix these goofy names
dir.jre=//Bigfoot/Engineering/SDK/Java/JRE
uncpath.dotnet=//Bigfoot/Engineering/SDK/Microsoft/DotNetFramework
uncpath.iontas=//Bigfoot/Engineering/SDK/Iontas
uncpath.cd3_sources=//Bigfoot/Engineering/SDK/CD3
uncpath.cd4_sources=//Bigfoot/Engineering/SDK/CD4
#uncpath.utils=//Bigfoot/Engineering/SDK/


# ----------------------------------------------------------------------------
# java compiler settings
# ----------------------------------------------------------------------------
build.compiler=javac1.6
javac.debug=true
javac.deprecation=false
javac.source=1.6


# ----------------------------------------------------------------------------
# external tools
# ----------------------------------------------------------------------------

# starters
ProgramFiles=C:/Program Files
DotNetFramework=C:/Windows/Microsoft.NET/Framework

# The build tools should read ant.home and java.home environment variables, or
# set them in runbuild.py if they're not already set.
# TODO delete in favor of runbuild.py
ant.home=${ProgramFiles}/Ant/apache-ant-1.7.1
# TODO delete in favor of runbuild.py
java.home=${ProgramFiles}/Java/jdk1.6.0_14

# One of these compilers is chosen in build.xml or buildC#CPP.xml.  The
# duality will be removed when all build bits are in the same file.
#vs71_devenv=${ProgramFiles}/Microsoft Visual Studio .NET 2003/Common7/IDE/devenv.com
vs80_devenv=${ProgramFiles}/Microsoft Visual Studio 8/Common7/IDE/devenv.com
vs90_devenv=${ProgramFiles}/Microsoft Visual Studio 9.0/Common7/IDE/devenv.com

# DEPENDENCY: need to install the Windows SDK to get mc.exe for VS2008
# http://blogs.msdn.com/windowssdk/pages/net-framework-and-windows-tools-in-visual-studio-2008.aspx
#vs71_mc=${ProgramFiles}/Microsoft Visual Studio .NET 2003/Common7/Tools/Bin/MC.Exe
vs80_mc=${ProgramFiles}/Microsoft Visual Studio 8/Common7/Tools/Bin/MC.Exe
vs90_mc=${ProgramFiles}/Microsoft SDKs/Windows/v6.0A/bin/MC.Exe

#dotnet20_MSBuild=${DotNetFramework}/v2.0.50727/MSBuild.exe
#dotnet35_MSBuild=${DotNetFramework}/v3.5/MSBuild.exe
compiler.msbuild=${DotNetFramework}/v3.5/MSBuild.exe

# These two aren't compilers, but that name will do until I come up with
# something general and accurate.
compiler.ai=${ProgramFiles}/Caphyon/Advanced Installer 7.7/bin/x86/AdvancedInstaller.com
#compiler.wise=${ProgramFiles}/Wise for Windows Installer/WfWI.exe

# Is there a different signtool for each version of Visual Studio?
signtool=${dir.bin}/signtool.exe
signtool.timestampurl=http://timestamp.verisign.com/scripts/timstamp.dll

# The signtool.password needs to be updated between (I think) 9.0.4 and 9.7.
# The 9.6 buildtools source shows Envision07 as the password, so another bites
# the dust (maybe). -timc 5/29/2009
#
# TODO signtool.privatepass (and its corresponding conditional logic) can
# probably go away
#signtool.privatepass=rodfirnatsco
signtool.envisionpass=Envision07

# NOTE: If signtool fails, check that this file is identical across all
# products (Maya, Acme, Tate)!
#
# TODO cert.private (and its corresponding conditional logic) can probably go
# away
#cert.private=${dir.build}/setup/Signature/myprivatecert.pfx
cert.envision=${dir.build}/setup/Signature/EnvisionCertificate.pfx

# Fire up a new virtual machine?  Defaults to false.
vmlauncher=false

# ----------------------------------------------------------------------------
# unit test settings
# ----------------------------------------------------------------------------
unittest.nunit.bin=${ProgramFiles}/NUnit 2.5.2/bin/net-2.0
# Alliance5 is dead!
unittest.sqlserver=Alliance5
unittest.sqldb=EPS9_Common
